
DrivetrainController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000790c  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08007b00  08007b00  00017b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b80  08007b80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b80  08007b80  00017b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b88  08007b88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b88  08007b88  00017b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b8c  08007b8c  00017b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  2000000c  08007b9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  08007b9c  000205c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020f9c  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003db9  00000000  00000000  00041021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c20  00000000  00000000  00044de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015d3  00000000  00000000  00046a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dd19  00000000  00000000  00047fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000205ac  00000000  00000000  00075cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00132ad3  00000000  00000000  00096298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000079fc  00000000  00000000  001c8d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001d0768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08007ae8 	.word	0x08007ae8

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08007ae8 	.word	0x08007ae8

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d146      	bne.n	8000302 <__udivmoddi4+0x9e>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d95e      	bls.n	8000338 <__udivmoddi4+0xd4>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	409c      	lsls	r4, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	4317      	orrs	r7, r2
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d908      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f200 8134 	bhi.w	8000528 <__udivmoddi4+0x2c4>
 80002c0:	4639      	mov	r1, r7
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	fb00 f505 	mul.w	r5, r0, r5
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0x88>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x86>
 80002e4:	42a5      	cmp	r5, r4
 80002e6:	f200 8119 	bhi.w	800051c <__udivmoddi4+0x2b8>
 80002ea:	4610      	mov	r0, r2
 80002ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11e      	cbz	r6, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c6 4300 	strd	r4, r3, [r6]
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0xb4>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80fc 	beq.w	8000504 <__udivmoddi4+0x2a0>
 800030c:	2100      	movs	r1, #0
 800030e:	e9c6 0500 	strd	r0, r5, [r6]
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	d14c      	bne.n	80003ba <__udivmoddi4+0x156>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f0c0 80f2 	bcc.w	800050a <__udivmoddi4+0x2a6>
 8000326:	4282      	cmp	r2, r0
 8000328:	f240 80ef 	bls.w	800050a <__udivmoddi4+0x2a6>
 800032c:	4608      	mov	r0, r1
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e5      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000332:	e9c6 4700 	strd	r4, r7, [r6]
 8000336:	e7e2      	b.n	80002fe <__udivmoddi4+0x9a>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xd8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f382 	clz	r3, r2
 8000340:	2b00      	cmp	r3, #0
 8000342:	f040 809f 	bne.w	8000484 <__udivmoddi4+0x220>
 8000346:	1a8a      	subs	r2, r1, r2
 8000348:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 f5fe 	udiv	r5, r2, lr
 8000356:	fb0e 2015 	mls	r0, lr, r5, r2
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb07 f005 	mul.w	r0, r7, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90f      	bls.n	8000388 <__udivmoddi4+0x124>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	bf2c      	ite	cs
 8000372:	f04f 0901 	movcs.w	r9, #1
 8000376:	f04f 0900 	movcc.w	r9, #0
 800037a:	4290      	cmp	r0, r2
 800037c:	d903      	bls.n	8000386 <__udivmoddi4+0x122>
 800037e:	f1b9 0f00 	cmp.w	r9, #0
 8000382:	f000 80ce 	beq.w	8000522 <__udivmoddi4+0x2be>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000390:	fb0e 2210 	mls	r2, lr, r0, r2
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	42a7      	cmp	r7, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	f200 80b3 	bhi.w	8000516 <__udivmoddi4+0x2b2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b8:	e79c      	b.n	80002f4 <__udivmoddi4+0x90>
 80003ba:	f1c1 0420 	rsb	r4, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003c4:	fa22 f704 	lsr.w	r7, r2, r4
 80003c8:	40e5      	lsrs	r5, r4
 80003ca:	408a      	lsls	r2, r1
 80003cc:	431f      	orrs	r7, r3
 80003ce:	fa20 f304 	lsr.w	r3, r0, r4
 80003d2:	4088      	lsls	r0, r1
 80003d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d8:	ea43 030c 	orr.w	r3, r3, ip
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb5 fef8 	udiv	lr, r5, r8
 80003e8:	fb08 551e 	mls	r5, r8, lr, r5
 80003ec:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80003f0:	fb0e f90c 	mul.w	r9, lr, ip
 80003f4:	45a9      	cmp	r9, r5
 80003f6:	d90e      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003f8:	197d      	adds	r5, r7, r5
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	bf2c      	ite	cs
 8000400:	f04f 0b01 	movcs.w	fp, #1
 8000404:	f04f 0b00 	movcc.w	fp, #0
 8000408:	45a9      	cmp	r9, r5
 800040a:	d903      	bls.n	8000414 <__udivmoddi4+0x1b0>
 800040c:	f1bb 0f00 	cmp.w	fp, #0
 8000410:	f000 808d 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000414:	46d6      	mov	lr, sl
 8000416:	eba5 0509 	sub.w	r5, r5, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000422:	fb08 5513 	mls	r5, r8, r3, r5
 8000426:	fb03 fc0c 	mul.w	ip, r3, ip
 800042a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800042e:	45ac      	cmp	ip, r5
 8000430:	d906      	bls.n	8000440 <__udivmoddi4+0x1dc>
 8000432:	197d      	adds	r5, r7, r5
 8000434:	f103 38ff 	add.w	r8, r3, #4294967295
 8000438:	d201      	bcs.n	800043e <__udivmoddi4+0x1da>
 800043a:	45ac      	cmp	ip, r5
 800043c:	d87e      	bhi.n	800053c <__udivmoddi4+0x2d8>
 800043e:	4643      	mov	r3, r8
 8000440:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000444:	eba5 050c 	sub.w	r5, r5, ip
 8000448:	fba3 9802 	umull	r9, r8, r3, r2
 800044c:	4545      	cmp	r5, r8
 800044e:	46ce      	mov	lr, r9
 8000450:	46c4      	mov	ip, r8
 8000452:	d302      	bcc.n	800045a <__udivmoddi4+0x1f6>
 8000454:	d106      	bne.n	8000464 <__udivmoddi4+0x200>
 8000456:	4548      	cmp	r0, r9
 8000458:	d204      	bcs.n	8000464 <__udivmoddi4+0x200>
 800045a:	3b01      	subs	r3, #1
 800045c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000460:	eb68 0c07 	sbc.w	ip, r8, r7
 8000464:	2e00      	cmp	r6, #0
 8000466:	d06f      	beq.n	8000548 <__udivmoddi4+0x2e4>
 8000468:	ebb0 020e 	subs.w	r2, r0, lr
 800046c:	eb65 050c 	sbc.w	r5, r5, ip
 8000470:	40ca      	lsrs	r2, r1
 8000472:	fa05 f404 	lsl.w	r4, r5, r4
 8000476:	40cd      	lsrs	r5, r1
 8000478:	4618      	mov	r0, r3
 800047a:	4314      	orrs	r4, r2
 800047c:	2100      	movs	r1, #0
 800047e:	e9c6 4500 	strd	r4, r5, [r6]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0220 	rsb	r2, r3, #32
 800048c:	4099      	lsls	r1, r3
 800048e:	409c      	lsls	r4, r3
 8000490:	40d5      	lsrs	r5, r2
 8000492:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000496:	fa20 f202 	lsr.w	r2, r0, r2
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fbb5 f0fe 	udiv	r0, r5, lr
 80004a2:	430a      	orrs	r2, r1
 80004a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004a8:	0c11      	lsrs	r1, r2, #16
 80004aa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ae:	fb00 f507 	mul.w	r5, r0, r7
 80004b2:	428d      	cmp	r5, r1
 80004b4:	d90e      	bls.n	80004d4 <__udivmoddi4+0x270>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	bf2c      	ite	cs
 80004c0:	f04f 0901 	movcs.w	r9, #1
 80004c4:	f04f 0900 	movcc.w	r9, #0
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d902      	bls.n	80004d2 <__udivmoddi4+0x26e>
 80004cc:	f1b9 0f00 	cmp.w	r9, #0
 80004d0:	d031      	beq.n	8000536 <__udivmoddi4+0x2d2>
 80004d2:	4640      	mov	r0, r8
 80004d4:	1b49      	subs	r1, r1, r5
 80004d6:	b292      	uxth	r2, r2
 80004d8:	fbb1 f5fe 	udiv	r5, r1, lr
 80004dc:	fb0e 1115 	mls	r1, lr, r5, r1
 80004e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e4:	fb05 f107 	mul.w	r1, r5, r7
 80004e8:	4291      	cmp	r1, r2
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x298>
 80004ec:	eb1c 0202 	adds.w	r2, ip, r2
 80004f0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f4:	d201      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004f6:	4291      	cmp	r1, r2
 80004f8:	d823      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004fa:	4645      	mov	r5, r8
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000502:	e726      	b.n	8000352 <__udivmoddi4+0xee>
 8000504:	4631      	mov	r1, r6
 8000506:	4630      	mov	r0, r6
 8000508:	e6f9      	b.n	80002fe <__udivmoddi4+0x9a>
 800050a:	1a84      	subs	r4, r0, r2
 800050c:	eb65 0203 	sbc.w	r2, r5, r3
 8000510:	2001      	movs	r0, #1
 8000512:	4617      	mov	r7, r2
 8000514:	e70b      	b.n	800032e <__udivmoddi4+0xca>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14e>
 800051c:	4464      	add	r4, ip
 800051e:	3802      	subs	r0, #2
 8000520:	e6e4      	b.n	80002ec <__udivmoddi4+0x88>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	e72f      	b.n	8000388 <__udivmoddi4+0x124>
 8000528:	3902      	subs	r1, #2
 800052a:	4462      	add	r2, ip
 800052c:	e6c9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800052e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000532:	443d      	add	r5, r7
 8000534:	e76f      	b.n	8000416 <__udivmoddi4+0x1b2>
 8000536:	3802      	subs	r0, #2
 8000538:	4461      	add	r1, ip
 800053a:	e7cb      	b.n	80004d4 <__udivmoddi4+0x270>
 800053c:	3b02      	subs	r3, #2
 800053e:	443d      	add	r5, r7
 8000540:	e77e      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000542:	3d02      	subs	r5, #2
 8000544:	4462      	add	r2, ip
 8000546:	e7d9      	b.n	80004fc <__udivmoddi4+0x298>
 8000548:	4618      	mov	r0, r3
 800054a:	4631      	mov	r1, r6
 800054c:	e6d7      	b.n	80002fe <__udivmoddi4+0x9a>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000560:	4907      	ldr	r1, [pc, #28]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4013      	ands	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000

08000584 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800058e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000590:	4907      	ldr	r1, [pc, #28]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4313      	orrs	r3, r2
 8000596:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800059a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4013      	ands	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f001 f83f 	bl	800163a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f818 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 fb8a 	bl	8000cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c4:	f000 fb5e 	bl	8000c84 <MX_DMA_Init>
  MX_ICACHE_Init();
 80005c8:	f000 f8ea 	bl	80007a0 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80005cc:	f000 f8fc 	bl	80007c8 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80005d0:	f000 f994 	bl	80008fc <MX_RTC_Init>
  MX_UCPD1_Init();
 80005d4:	f000 faf8 	bl	8000bc8 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80005d8:	f000 fb2c 	bl	8000c34 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 80005dc:	f000 f942 	bl	8000864 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80005e0:	f000 f868 	bl	80006b4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80005e4:	f000 f9d4 	bl	8000990 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005e8:	f000 fa60 	bl	8000aac <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x38>
	...

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b098      	sub	sp, #96	; 0x60
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	2248      	movs	r2, #72	; 0x48
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f007 fa45 	bl	8007a8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000612:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000616:	f002 ff0b 	bl	8003430 <HAL_PWREx_ControlVoltageScaling>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000620:	f000 fc04 	bl	8000e2c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000624:	f002 fee6 	bl	80033f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <SystemClock_Config+0xc0>)
 800062a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800062e:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <SystemClock_Config+0xc0>)
 8000630:	f023 0318 	bic.w	r3, r3, #24
 8000634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8000638:	2334      	movs	r3, #52	; 0x34
 800063a:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800063c:	2381      	movs	r3, #129	; 0x81
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000648:	2300      	movs	r3, #0
 800064a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800064c:	2360      	movs	r3, #96	; 0x60
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000654:	2301      	movs	r3, #1
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000658:	2301      	movs	r3, #1
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 24;
 800065c:	2318      	movs	r3, #24
 800065e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000660:	2307      	movs	r3, #7
 8000662:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0318 	add.w	r3, r7, #24
 8000670:	4618      	mov	r0, r3
 8000672:	f002 ff6d 	bl	8003550 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800067c:	f000 fbd6 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2303      	movs	r3, #3
 8000686:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2102      	movs	r1, #2
 8000698:	4618      	mov	r0, r3
 800069a:	f003 fc2f 	bl	8003efc <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006a4:	f000 fbc2 	bl	8000e2c <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3760      	adds	r7, #96	; 0x60
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000

080006b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
 80006d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006d8:	4a2f      	ldr	r2, [pc, #188]	; (8000798 <MX_ADC1_Init+0xe4>)
 80006da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006dc:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e2:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f4:	4b27      	ldr	r3, [pc, #156]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006f6:	2204      	movs	r2, #4
 80006f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <MX_ADC1_Init+0xe0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000700:	4b24      	ldr	r3, [pc, #144]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000702:	2200      	movs	r2, #0
 8000704:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000708:	2201      	movs	r2, #1
 800070a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_ADC1_Init+0xe0>)
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071a:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_ADC1_Init+0xe0>)
 800071c:	2200      	movs	r2, #0
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_ADC1_Init+0xe0>)
 800072a:	2200      	movs	r2, #0
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000730:	2200      	movs	r2, #0
 8000732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000736:	4817      	ldr	r0, [pc, #92]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000738:	f001 f996 	bl	8001a68 <HAL_ADC_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000742:	f000 fb73 	bl	8000e2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4810      	ldr	r0, [pc, #64]	; (8000794 <MX_ADC1_Init+0xe0>)
 8000752:	f001 fee5 	bl	8002520 <HAL_ADCEx_MultiModeConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800075c:	f000 fb66 	bl	8000e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_ADC1_Init+0xe8>)
 8000762:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000764:	2306      	movs	r3, #6
 8000766:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800076c:	237f      	movs	r3, #127	; 0x7f
 800076e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000770:	2304      	movs	r3, #4
 8000772:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	4619      	mov	r1, r3
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_ADC1_Init+0xe0>)
 800077e:	f001 fabf 	bl	8001d00 <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000788:	f000 fb50 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000028 	.word	0x20000028
 8000798:	42028000 	.word	0x42028000
 800079c:	0c900008 	.word	0x0c900008

080007a0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80007a4:	2000      	movs	r0, #0
 80007a6:	f002 fcfd 	bl	80031a4 <HAL_ICACHE_ConfigAssociativityMode>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80007b0:	f000 fb3c 	bl	8000e2c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80007b4:	f002 fd16 	bl	80031e4 <HAL_ICACHE_Enable>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80007be:	f000 fb35 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007ce:	4a23      	ldr	r2, [pc, #140]	; (800085c <MX_LPUART1_UART_Init+0x94>)
 80007d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007d4:	4a22      	ldr	r2, [pc, #136]	; (8000860 <MX_LPUART1_UART_Init+0x98>)
 80007d6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007ea:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007ec:	220c      	movs	r2, #12
 80007ee:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800080e:	4812      	ldr	r0, [pc, #72]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 8000810:	f005 fd36 	bl	8006280 <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 800081a:	f000 fb07 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081e:	2100      	movs	r1, #0
 8000820:	480d      	ldr	r0, [pc, #52]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 8000822:	f006 fe78 	bl	8007516 <HAL_UARTEx_SetTxFifoThreshold>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 800082c:	f000 fafe 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000830:	2100      	movs	r1, #0
 8000832:	4809      	ldr	r0, [pc, #36]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 8000834:	f006 fead 	bl	8007592 <HAL_UARTEx_SetRxFifoThreshold>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800083e:	f000 faf5 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_LPUART1_UART_Init+0x90>)
 8000844:	f006 fe2e 	bl	80074a4 <HAL_UARTEx_DisableFifoMode>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800084e:	f000 faed 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000090 	.word	0x20000090
 800085c:	40008000 	.word	0x40008000
 8000860:	00033324 	.word	0x00033324

08000864 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <MX_USART1_UART_Init+0x90>)
 800086a:	4a23      	ldr	r2, [pc, #140]	; (80008f8 <MX_USART1_UART_Init+0x94>)
 800086c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_USART1_UART_Init+0x90>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_USART1_UART_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_USART1_UART_Init+0x90>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_USART1_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_USART1_UART_Init+0x90>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_USART1_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_USART1_UART_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_USART1_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_USART1_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_USART1_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ac:	4811      	ldr	r0, [pc, #68]	; (80008f4 <MX_USART1_UART_Init+0x90>)
 80008ae:	f005 fce7 	bl	8006280 <HAL_UART_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008b8:	f000 fab8 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008bc:	2100      	movs	r1, #0
 80008be:	480d      	ldr	r0, [pc, #52]	; (80008f4 <MX_USART1_UART_Init+0x90>)
 80008c0:	f006 fe29 	bl	8007516 <HAL_UARTEx_SetTxFifoThreshold>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008ca:	f000 faaf 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4808      	ldr	r0, [pc, #32]	; (80008f4 <MX_USART1_UART_Init+0x90>)
 80008d2:	f006 fe5e 	bl	8007592 <HAL_UARTEx_SetRxFifoThreshold>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008dc:	f000 faa6 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_USART1_UART_Init+0x90>)
 80008e2:	f006 fddf 	bl	80074a4 <HAL_UARTEx_DisableFifoMode>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008ec:	f000 fa9e 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000124 	.word	0x20000124
 80008f8:	40013800 	.word	0x40013800

080008fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000902:	463b      	mov	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
 8000910:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_RTC_Init+0x8c>)
 8000914:	4a1d      	ldr	r2, [pc, #116]	; (800098c <MX_RTC_Init+0x90>)
 8000916:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <MX_RTC_Init+0x8c>)
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_RTC_Init+0x8c>)
 8000920:	227f      	movs	r2, #127	; 0x7f
 8000922:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <MX_RTC_Init+0x8c>)
 8000926:	22ff      	movs	r2, #255	; 0xff
 8000928:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_RTC_Init+0x8c>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_RTC_Init+0x8c>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_RTC_Init+0x8c>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_RTC_Init+0x8c>)
 800093e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000942:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_RTC_Init+0x8c>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800094a:	480f      	ldr	r0, [pc, #60]	; (8000988 <MX_RTC_Init+0x8c>)
 800094c:	f004 fad0 	bl	8004ef0 <HAL_RTC_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000956:	f000 fa69 	bl	8000e2c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800096a:	463b      	mov	r3, r7
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <MX_RTC_Init+0x8c>)
 8000970:	f004 fbcc 	bl	800510c <HAL_RTCEx_PrivilegeModeSet>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800097a:	f000 fa57 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000220 	.word	0x20000220
 800098c:	40002800 	.word	0x40002800

08000990 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08e      	sub	sp, #56	; 0x38
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b0:	463b      	mov	r3, r7
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
 80009be:	615a      	str	r2, [r3, #20]
 80009c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009c2:	4b38      	ldr	r3, [pc, #224]	; (8000aa4 <MX_TIM3_Init+0x114>)
 80009c4:	4a38      	ldr	r2, [pc, #224]	; (8000aa8 <MX_TIM3_Init+0x118>)
 80009c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 80009c8:	4b36      	ldr	r3, [pc, #216]	; (8000aa4 <MX_TIM3_Init+0x114>)
 80009ca:	220f      	movs	r2, #15
 80009cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ce:	4b35      	ldr	r3, [pc, #212]	; (8000aa4 <MX_TIM3_Init+0x114>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 80009d4:	4b33      	ldr	r3, [pc, #204]	; (8000aa4 <MX_TIM3_Init+0x114>)
 80009d6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80009da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009dc:	4b31      	ldr	r3, [pc, #196]	; (8000aa4 <MX_TIM3_Init+0x114>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e2:	4b30      	ldr	r3, [pc, #192]	; (8000aa4 <MX_TIM3_Init+0x114>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009e8:	482e      	ldr	r0, [pc, #184]	; (8000aa4 <MX_TIM3_Init+0x114>)
 80009ea:	f004 fbbb 	bl	8005164 <HAL_TIM_Base_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80009f4:	f000 fa1a 	bl	8000e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4827      	ldr	r0, [pc, #156]	; (8000aa4 <MX_TIM3_Init+0x114>)
 8000a06:	f004 fe81 	bl	800570c <HAL_TIM_ConfigClockSource>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000a10:	f000 fa0c 	bl	8000e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a14:	4823      	ldr	r0, [pc, #140]	; (8000aa4 <MX_TIM3_Init+0x114>)
 8000a16:	f004 fbfc 	bl	8005212 <HAL_TIM_PWM_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000a20:	f000 fa04 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	481c      	ldr	r0, [pc, #112]	; (8000aa4 <MX_TIM3_Init+0x114>)
 8000a34:	f005 fb7e 	bl	8006134 <HAL_TIMEx_MasterConfigSynchronization>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000a3e:	f000 f9f5 	bl	8000e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a42:	2360      	movs	r3, #96	; 0x60
 8000a44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a52:	463b      	mov	r3, r7
 8000a54:	2200      	movs	r2, #0
 8000a56:	4619      	mov	r1, r3
 8000a58:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <MX_TIM3_Init+0x114>)
 8000a5a:	f004 fd43 	bl	80054e4 <HAL_TIM_PWM_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a64:	f000 f9e2 	bl	8000e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <MX_TIM3_Init+0x114>)
 8000a70:	f004 fd38 	bl	80054e4 <HAL_TIM_PWM_ConfigChannel>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000a7a:	f000 f9d7 	bl	8000e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2208      	movs	r2, #8
 8000a82:	4619      	mov	r1, r3
 8000a84:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <MX_TIM3_Init+0x114>)
 8000a86:	f004 fd2d 	bl	80054e4 <HAL_TIM_PWM_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000a90:	f000 f9cc 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a94:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <MX_TIM3_Init+0x114>)
 8000a96:	f000 fbd7 	bl	8001248 <HAL_TIM_MspPostInit>

}
 8000a9a:	bf00      	nop
 8000a9c:	3738      	adds	r7, #56	; 0x38
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000248 	.word	0x20000248
 8000aa8:	40000400 	.word	0x40000400

08000aac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08e      	sub	sp, #56	; 0x38
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000acc:	463b      	mov	r3, r7
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
 8000ada:	615a      	str	r2, [r3, #20]
 8000adc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ade:	4b38      	ldr	r3, [pc, #224]	; (8000bc0 <MX_TIM4_Init+0x114>)
 8000ae0:	4a38      	ldr	r2, [pc, #224]	; (8000bc4 <MX_TIM4_Init+0x118>)
 8000ae2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8000ae4:	4b36      	ldr	r3, [pc, #216]	; (8000bc0 <MX_TIM4_Init+0x114>)
 8000ae6:	220f      	movs	r2, #15
 8000ae8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aea:	4b35      	ldr	r3, [pc, #212]	; (8000bc0 <MX_TIM4_Init+0x114>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 8000af0:	4b33      	ldr	r3, [pc, #204]	; (8000bc0 <MX_TIM4_Init+0x114>)
 8000af2:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000af6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af8:	4b31      	ldr	r3, [pc, #196]	; (8000bc0 <MX_TIM4_Init+0x114>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afe:	4b30      	ldr	r3, [pc, #192]	; (8000bc0 <MX_TIM4_Init+0x114>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b04:	482e      	ldr	r0, [pc, #184]	; (8000bc0 <MX_TIM4_Init+0x114>)
 8000b06:	f004 fb2d 	bl	8005164 <HAL_TIM_Base_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000b10:	f000 f98c 	bl	8000e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4827      	ldr	r0, [pc, #156]	; (8000bc0 <MX_TIM4_Init+0x114>)
 8000b22:	f004 fdf3 	bl	800570c <HAL_TIM_ConfigClockSource>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000b2c:	f000 f97e 	bl	8000e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b30:	4823      	ldr	r0, [pc, #140]	; (8000bc0 <MX_TIM4_Init+0x114>)
 8000b32:	f004 fb6e 	bl	8005212 <HAL_TIM_PWM_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000b3c:	f000 f976 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	481c      	ldr	r0, [pc, #112]	; (8000bc0 <MX_TIM4_Init+0x114>)
 8000b50:	f005 faf0 	bl	8006134 <HAL_TIMEx_MasterConfigSynchronization>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000b5a:	f000 f967 	bl	8000e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5e:	2360      	movs	r3, #96	; 0x60
 8000b60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	4619      	mov	r1, r3
 8000b74:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <MX_TIM4_Init+0x114>)
 8000b76:	f004 fcb5 	bl	80054e4 <HAL_TIM_PWM_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000b80:	f000 f954 	bl	8000e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b84:	463b      	mov	r3, r7
 8000b86:	2204      	movs	r2, #4
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_TIM4_Init+0x114>)
 8000b8c:	f004 fcaa 	bl	80054e4 <HAL_TIM_PWM_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000b96:	f000 f949 	bl	8000e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	2208      	movs	r2, #8
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <MX_TIM4_Init+0x114>)
 8000ba2:	f004 fc9f 	bl	80054e4 <HAL_TIM_PWM_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000bac:	f000 f93e 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000bb0:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <MX_TIM4_Init+0x114>)
 8000bb2:	f000 fb49 	bl	8001248 <HAL_TIM_MspPostInit>

}
 8000bb6:	bf00      	nop
 8000bb8:	3738      	adds	r7, #56	; 0x38
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000294 	.word	0x20000294
 8000bc4:	40000800 	.word	0x40000800

08000bc8 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000bde:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000be2:	f7ff fccf 	bl	8000584 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000be6:	2002      	movs	r0, #2
 8000be8:	f7ff fcb4 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000bec:	2001      	movs	r0, #1
 8000bee:	f7ff fcb1 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bf6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c00:	463b      	mov	r3, r7
 8000c02:	4619      	mov	r1, r3
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <MX_UCPD1_Init+0x64>)
 8000c06:	f006 fe9c 	bl	8007942 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c0e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c10:	2303      	movs	r3, #3
 8000c12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c14:	2300      	movs	r3, #0
 8000c16:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	463b      	mov	r3, r7
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <MX_UCPD1_Init+0x68>)
 8000c1e:	f006 fe90 	bl	8007942 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	42020400 	.word	0x42020400
 8000c30:	42020000 	.word	0x42020000

08000c34 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000c38:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_USB_PCD_Init+0x48>)
 8000c3a:	4a11      	ldr	r2, [pc, #68]	; (8000c80 <MX_USB_PCD_Init+0x4c>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_USB_PCD_Init+0x48>)
 8000c40:	2208      	movs	r2, #8
 8000c42:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000c44:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <MX_USB_PCD_Init+0x48>)
 8000c46:	2202      	movs	r2, #2
 8000c48:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_USB_PCD_Init+0x48>)
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MX_USB_PCD_Init+0x48>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_USB_PCD_Init+0x48>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <MX_USB_PCD_Init+0x48>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_USB_PCD_Init+0x48>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_USB_PCD_Init+0x48>)
 8000c6a:	f002 facb 	bl	8003204 <HAL_PCD_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000c74:	f000 f8da 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200002e0 	.word	0x200002e0
 8000c80:	4000d400 	.word	0x4000d400

08000c84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <MX_DMA_Init+0x50>)
 8000c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c8e:	4a11      	ldr	r2, [pc, #68]	; (8000cd4 <MX_DMA_Init+0x50>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6493      	str	r3, [r2, #72]	; 0x48
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_DMA_Init+0x50>)
 8000c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_DMA_Init+0x50>)
 8000ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <MX_DMA_Init+0x50>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6493      	str	r3, [r2, #72]	; 0x48
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_DMA_Init+0x50>)
 8000cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	201d      	movs	r0, #29
 8000cc0:	f001 fdad 	bl	800281e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cc4:	201d      	movs	r0, #29
 8000cc6:	f001 fdc4 	bl	8002852 <HAL_NVIC_EnableIRQ>

}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	; 0x30
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cee:	4b4b      	ldr	r3, [pc, #300]	; (8000e1c <MX_GPIO_Init+0x144>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a4a      	ldr	r2, [pc, #296]	; (8000e1c <MX_GPIO_Init+0x144>)
 8000cf4:	f043 0310 	orr.w	r3, r3, #16
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b48      	ldr	r3, [pc, #288]	; (8000e1c <MX_GPIO_Init+0x144>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0310 	and.w	r3, r3, #16
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	4b45      	ldr	r3, [pc, #276]	; (8000e1c <MX_GPIO_Init+0x144>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	4a44      	ldr	r2, [pc, #272]	; (8000e1c <MX_GPIO_Init+0x144>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d12:	4b42      	ldr	r3, [pc, #264]	; (8000e1c <MX_GPIO_Init+0x144>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <MX_GPIO_Init+0x144>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a3e      	ldr	r2, [pc, #248]	; (8000e1c <MX_GPIO_Init+0x144>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b3c      	ldr	r3, [pc, #240]	; (8000e1c <MX_GPIO_Init+0x144>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d36:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <MX_GPIO_Init+0x144>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	4a38      	ldr	r2, [pc, #224]	; (8000e1c <MX_GPIO_Init+0x144>)
 8000d3c:	f043 0308 	orr.w	r3, r3, #8
 8000d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d42:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <MX_GPIO_Init+0x144>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	f003 0308 	and.w	r3, r3, #8
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d4e:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <MX_GPIO_Init+0x144>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	4a32      	ldr	r2, [pc, #200]	; (8000e1c <MX_GPIO_Init+0x144>)
 8000d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5a:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <MX_GPIO_Init+0x144>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000d66:	f002 fbbf 	bl	80034e8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <MX_GPIO_Init+0x144>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	4a2b      	ldr	r2, [pc, #172]	; (8000e1c <MX_GPIO_Init+0x144>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d76:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <MX_GPIO_Init+0x144>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2180      	movs	r1, #128	; 0x80
 8000d86:	4826      	ldr	r0, [pc, #152]	; (8000e20 <MX_GPIO_Init+0x148>)
 8000d88:	f002 f9f4 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d92:	4824      	ldr	r0, [pc, #144]	; (8000e24 <MX_GPIO_Init+0x14c>)
 8000d94:	f002 f9ee 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	21a0      	movs	r1, #160	; 0xa0
 8000d9c:	4822      	ldr	r0, [pc, #136]	; (8000e28 <MX_GPIO_Init+0x150>)
 8000d9e:	f002 f9e9 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000da2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	481b      	ldr	r0, [pc, #108]	; (8000e28 <MX_GPIO_Init+0x150>)
 8000dba:	f002 f85b 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000dbe:	2380      	movs	r3, #128	; 0x80
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4812      	ldr	r0, [pc, #72]	; (8000e20 <MX_GPIO_Init+0x148>)
 8000dd6:	f002 f84d 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000dda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4619      	mov	r1, r3
 8000df2:	480c      	ldr	r0, [pc, #48]	; (8000e24 <MX_GPIO_Init+0x14c>)
 8000df4:	f002 f83e 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000df8:	23a0      	movs	r3, #160	; 0xa0
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4806      	ldr	r0, [pc, #24]	; (8000e28 <MX_GPIO_Init+0x150>)
 8000e10:	f002 f830 	bl	8002e74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e14:	bf00      	nop
 8000e16:	3730      	adds	r7, #48	; 0x30
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	42020800 	.word	0x42020800
 8000e24:	42020000 	.word	0x42020000
 8000e28:	42020400 	.word	0x42020400

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <Error_Handler+0x8>
	...

08000e38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_MspInit+0x44>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <HAL_MspInit+0x44>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_MspInit+0x44>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_MspInit+0x44>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5a:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <HAL_MspInit+0x44>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	6593      	str	r3, [r2, #88]	; 0x58
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_MspInit+0x44>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0ae      	sub	sp, #184	; 0xb8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	2294      	movs	r2, #148	; 0x94
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f006 fdf4 	bl	8007a8e <memset>
  if(hadc->Instance==ADC1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <HAL_ADC_MspInit+0xa8>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d137      	bne.n	8000f20 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000eb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eb4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000eb6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 fafe 	bl	80044c4 <HAL_RCCEx_PeriphCLKConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000ece:	f7ff ffad 	bl	8000e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_ADC_MspInit+0xac>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a15      	ldr	r2, [pc, #84]	; (8000f2c <HAL_ADC_MspInit+0xac>)
 8000ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_ADC_MspInit+0xac>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_ADC_MspInit+0xac>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <HAL_ADC_MspInit+0xac>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_ADC_MspInit+0xac>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000f02:	2304      	movs	r3, #4
 8000f04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <HAL_ADC_MspInit+0xb0>)
 8000f1c:	f001 ffaa 	bl	8002e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f20:	bf00      	nop
 8000f22:	37b8      	adds	r7, #184	; 0xb8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	42028000 	.word	0x42028000
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	42020800 	.word	0x42020800

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0b2      	sub	sp, #200	; 0xc8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f4c:	f107 0320 	add.w	r3, r7, #32
 8000f50:	2294      	movs	r2, #148	; 0x94
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f006 fd9a 	bl	8007a8e <memset>
  if(huart->Instance==LPUART1)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a73      	ldr	r2, [pc, #460]	; (800112c <HAL_UART_MspInit+0x1f8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d13e      	bne.n	8000fe2 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f64:	2320      	movs	r3, #32
 8000f66:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6c:	f107 0320 	add.w	r3, r7, #32
 8000f70:	4618      	mov	r0, r3
 8000f72:	f003 faa7 	bl	80044c4 <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f7c:	f7ff ff56 	bl	8000e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f80:	4b6b      	ldr	r3, [pc, #428]	; (8001130 <HAL_UART_MspInit+0x1fc>)
 8000f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f84:	4a6a      	ldr	r2, [pc, #424]	; (8001130 <HAL_UART_MspInit+0x1fc>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000f8c:	4b68      	ldr	r3, [pc, #416]	; (8001130 <HAL_UART_MspInit+0x1fc>)
 8000f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f98:	4b65      	ldr	r3, [pc, #404]	; (8001130 <HAL_UART_MspInit+0x1fc>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	4a64      	ldr	r2, [pc, #400]	; (8001130 <HAL_UART_MspInit+0x1fc>)
 8000f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa4:	4b62      	ldr	r3, [pc, #392]	; (8001130 <HAL_UART_MspInit+0x1fc>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8000fb0:	f002 fa9a 	bl	80034e8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000fb4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000fce:	2308      	movs	r3, #8
 8000fd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fd4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4856      	ldr	r0, [pc, #344]	; (8001134 <HAL_UART_MspInit+0x200>)
 8000fdc:	f001 ff4a 	bl	8002e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fe0:	e0a0      	b.n	8001124 <HAL_UART_MspInit+0x1f0>
  else if(huart->Instance==USART1)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a54      	ldr	r2, [pc, #336]	; (8001138 <HAL_UART_MspInit+0x204>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	f040 809b 	bne.w	8001124 <HAL_UART_MspInit+0x1f0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f003 fa62 	bl	80044c4 <HAL_RCCEx_PeriphCLKConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001006:	f7ff ff11 	bl	8000e2c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800100a:	4b49      	ldr	r3, [pc, #292]	; (8001130 <HAL_UART_MspInit+0x1fc>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100e:	4a48      	ldr	r2, [pc, #288]	; (8001130 <HAL_UART_MspInit+0x1fc>)
 8001010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001014:	6613      	str	r3, [r2, #96]	; 0x60
 8001016:	4b46      	ldr	r3, [pc, #280]	; (8001130 <HAL_UART_MspInit+0x1fc>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b43      	ldr	r3, [pc, #268]	; (8001130 <HAL_UART_MspInit+0x1fc>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	4a42      	ldr	r2, [pc, #264]	; (8001130 <HAL_UART_MspInit+0x1fc>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102e:	4b40      	ldr	r3, [pc, #256]	; (8001130 <HAL_UART_MspInit+0x1fc>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800103a:	4b3d      	ldr	r3, [pc, #244]	; (8001130 <HAL_UART_MspInit+0x1fc>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4a3c      	ldr	r2, [pc, #240]	; (8001130 <HAL_UART_MspInit+0x1fc>)
 8001040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4b3a      	ldr	r3, [pc, #232]	; (8001130 <HAL_UART_MspInit+0x1fc>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001052:	f002 fa49 	bl	80034e8 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001070:	2307      	movs	r3, #7
 8001072:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800107a:	4619      	mov	r1, r3
 800107c:	482f      	ldr	r0, [pc, #188]	; (800113c <HAL_UART_MspInit+0x208>)
 800107e:	f001 fef9 	bl	8002e74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001082:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001086:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800109c:	2307      	movs	r3, #7
 800109e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010a6:	4619      	mov	r1, r3
 80010a8:	4822      	ldr	r0, [pc, #136]	; (8001134 <HAL_UART_MspInit+0x200>)
 80010aa:	f001 fee3 	bl	8002e74 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80010ae:	4b24      	ldr	r3, [pc, #144]	; (8001140 <HAL_UART_MspInit+0x20c>)
 80010b0:	4a24      	ldr	r2, [pc, #144]	; (8001144 <HAL_UART_MspInit+0x210>)
 80010b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80010b4:	4b22      	ldr	r3, [pc, #136]	; (8001140 <HAL_UART_MspInit+0x20c>)
 80010b6:	2219      	movs	r2, #25
 80010b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <HAL_UART_MspInit+0x20c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <HAL_UART_MspInit+0x20c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010c6:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <HAL_UART_MspInit+0x20c>)
 80010c8:	2280      	movs	r2, #128	; 0x80
 80010ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <HAL_UART_MspInit+0x20c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010d2:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <HAL_UART_MspInit+0x20c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <HAL_UART_MspInit+0x20c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <HAL_UART_MspInit+0x20c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010e4:	4816      	ldr	r0, [pc, #88]	; (8001140 <HAL_UART_MspInit+0x20c>)
 80010e6:	f001 fbcf 	bl	8002888 <HAL_DMA_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 80010f0:	f7ff fe9c 	bl	8000e2c <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80010f4:	2110      	movs	r1, #16
 80010f6:	4812      	ldr	r0, [pc, #72]	; (8001140 <HAL_UART_MspInit+0x20c>)
 80010f8:	f001 fe29 	bl	8002d4e <HAL_DMA_ConfigChannelAttributes>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8001102:	f7ff fe93 	bl	8000e2c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <HAL_UART_MspInit+0x20c>)
 800110a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800110e:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <HAL_UART_MspInit+0x20c>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	203d      	movs	r0, #61	; 0x3d
 800111a:	f001 fb80 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800111e:	203d      	movs	r0, #61	; 0x3d
 8001120:	f001 fb97 	bl	8002852 <HAL_NVIC_EnableIRQ>
}
 8001124:	bf00      	nop
 8001126:	37c8      	adds	r7, #200	; 0xc8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40008000 	.word	0x40008000
 8001130:	40021000 	.word	0x40021000
 8001134:	42021800 	.word	0x42021800
 8001138:	40013800 	.word	0x40013800
 800113c:	42020000 	.word	0x42020000
 8001140:	200001b8 	.word	0x200001b8
 8001144:	40020008 	.word	0x40020008

08001148 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b0a8      	sub	sp, #160	; 0xa0
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2294      	movs	r2, #148	; 0x94
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f006 fc98 	bl	8007a8e <memset>
  if(hrtc->Instance==RTC)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a16      	ldr	r2, [pc, #88]	; (80011bc <HAL_RTC_MspInit+0x74>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d124      	bne.n	80011b2 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800116c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800116e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001172:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	4618      	mov	r0, r3
 800117c:	f003 f9a2 	bl	80044c4 <HAL_RCCEx_PeriphCLKConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001186:	f7ff fe51 	bl	8000e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_RTC_MspInit+0x78>)
 800118c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001190:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <HAL_RTC_MspInit+0x78>)
 8001192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001196:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_RTC_MspInit+0x78>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_RTC_MspInit+0x78>)
 80011a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a4:	6593      	str	r3, [r2, #88]	; 0x58
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_RTC_MspInit+0x78>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011b2:	bf00      	nop
 80011b4:	37a0      	adds	r7, #160	; 0xa0
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40002800 	.word	0x40002800
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a1a      	ldr	r2, [pc, #104]	; (800123c <HAL_TIM_Base_MspInit+0x78>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d114      	bne.n	8001200 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <HAL_TIM_Base_MspInit+0x7c>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	4a19      	ldr	r2, [pc, #100]	; (8001240 <HAL_TIM_Base_MspInit+0x7c>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6593      	str	r3, [r2, #88]	; 0x58
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_TIM_Base_MspInit+0x7c>)
 80011e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	202e      	movs	r0, #46	; 0x2e
 80011f4:	f001 fb13 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011f8:	202e      	movs	r0, #46	; 0x2e
 80011fa:	f001 fb2a 	bl	8002852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011fe:	e018      	b.n	8001232 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_TIM_Base_MspInit+0x80>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d113      	bne.n	8001232 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <HAL_TIM_Base_MspInit+0x7c>)
 800120c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120e:	4a0c      	ldr	r2, [pc, #48]	; (8001240 <HAL_TIM_Base_MspInit+0x7c>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6593      	str	r3, [r2, #88]	; 0x58
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <HAL_TIM_Base_MspInit+0x7c>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	202f      	movs	r0, #47	; 0x2f
 8001228:	f001 faf9 	bl	800281e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800122c:	202f      	movs	r0, #47	; 0x2f
 800122e:	f001 fb10 	bl	8002852 <HAL_NVIC_EnableIRQ>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40000400 	.word	0x40000400
 8001240:	40021000 	.word	0x40021000
 8001244:	40000800 	.word	0x40000800

08001248 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a22      	ldr	r2, [pc, #136]	; (80012f0 <HAL_TIM_MspPostInit+0xa8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d11c      	bne.n	80012a4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800126a:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <HAL_TIM_MspPostInit+0xac>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <HAL_TIM_MspPostInit+0xac>)
 8001270:	f043 0310 	orr.w	r3, r3, #16
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <HAL_TIM_MspPostInit+0xac>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    PE5     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001282:	2338      	movs	r3, #56	; 0x38
 8001284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001292:	2302      	movs	r3, #2
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4816      	ldr	r0, [pc, #88]	; (80012f8 <HAL_TIM_MspPostInit+0xb0>)
 800129e:	f001 fde9 	bl	8002e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012a2:	e021      	b.n	80012e8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM4)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a14      	ldr	r2, [pc, #80]	; (80012fc <HAL_TIM_MspPostInit+0xb4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d11c      	bne.n	80012e8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_TIM_MspPostInit+0xac>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <HAL_TIM_MspPostInit+0xac>)
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_TIM_MspPostInit+0xac>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80012c6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80012ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012d8:	2302      	movs	r3, #2
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4807      	ldr	r0, [pc, #28]	; (8001300 <HAL_TIM_MspPostInit+0xb8>)
 80012e4:	f001 fdc6 	bl	8002e74 <HAL_GPIO_Init>
}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40000400 	.word	0x40000400
 80012f4:	40021000 	.word	0x40021000
 80012f8:	42021000 	.word	0x42021000
 80012fc:	40000800 	.word	0x40000800
 8001300:	42020c00 	.word	0x42020c00

08001304 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b0ae      	sub	sp, #184	; 0xb8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	2294      	movs	r2, #148	; 0x94
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f006 fbb2 	bl	8007a8e <memset>
  if(hpcd->Instance==USB)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a22      	ldr	r2, [pc, #136]	; (80013b8 <HAL_PCD_MspInit+0xb4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d13d      	bne.n	80013b0 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001338:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	4618      	mov	r0, r3
 8001346:	f003 f8bd 	bl	80044c4 <HAL_RCCEx_PeriphCLKConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001350:	f7ff fd6c 	bl	8000e2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_PCD_MspInit+0xb8>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	4a18      	ldr	r2, [pc, #96]	; (80013bc <HAL_PCD_MspInit+0xb8>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_PCD_MspInit+0xb8>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800136c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001370:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001386:	230a      	movs	r3, #10
 8001388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001390:	4619      	mov	r1, r3
 8001392:	480b      	ldr	r0, [pc, #44]	; (80013c0 <HAL_PCD_MspInit+0xbc>)
 8001394:	f001 fd6e 	bl	8002e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_PCD_MspInit+0xb8>)
 800139a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_PCD_MspInit+0xb8>)
 800139e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_PCD_MspInit+0xb8>)
 80013a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	37b8      	adds	r7, #184	; 0xb8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	4000d400 	.word	0x4000d400
 80013bc:	40021000 	.word	0x40021000
 80013c0:	42020000 	.word	0x42020000

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <NMI_Handler+0x4>

080013ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <HardFault_Handler+0x4>

080013d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <MemManage_Handler+0x4>

080013d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001410:	f000 f96a 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <DMA1_Channel1_IRQHandler+0x10>)
 800141e:	f001 fb96 	bl	8002b4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200001b8 	.word	0x200001b8

0800142c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <TIM3_IRQHandler+0x10>)
 8001432:	f003 ff4f 	bl	80052d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000248 	.word	0x20000248

08001440 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <TIM4_IRQHandler+0x10>)
 8001446:	f003 ff45 	bl	80052d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000294 	.word	0x20000294

08001454 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 26.
  */
void USART1_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <USART1_IRQHandler+0x10>)
 800145a:	f004 ff61 	bl	8006320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000124 	.word	0x20000124

08001468 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <SystemInit+0x20>)
 800146e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <SystemInit+0x20>)
 8001474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800148c:	b480      	push	{r7}
 800148e:	b087      	sub	sp, #28
 8001490:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001492:	4b4f      	ldr	r3, [pc, #316]	; (80015d0 <SystemCoreClockUpdate+0x144>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d107      	bne.n	80014ae <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800149e:	4b4c      	ldr	r3, [pc, #304]	; (80015d0 <SystemCoreClockUpdate+0x144>)
 80014a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e005      	b.n	80014ba <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80014ae:	4b48      	ldr	r3, [pc, #288]	; (80015d0 <SystemCoreClockUpdate+0x144>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	f003 030f 	and.w	r3, r3, #15
 80014b8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80014ba:	4a46      	ldr	r2, [pc, #280]	; (80015d4 <SystemCoreClockUpdate+0x148>)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014c4:	4b42      	ldr	r3, [pc, #264]	; (80015d0 <SystemCoreClockUpdate+0x144>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b0c      	cmp	r3, #12
 80014ce:	d866      	bhi.n	800159e <SystemCoreClockUpdate+0x112>
 80014d0:	a201      	add	r2, pc, #4	; (adr r2, 80014d8 <SystemCoreClockUpdate+0x4c>)
 80014d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d6:	bf00      	nop
 80014d8:	0800150d 	.word	0x0800150d
 80014dc:	0800159f 	.word	0x0800159f
 80014e0:	0800159f 	.word	0x0800159f
 80014e4:	0800159f 	.word	0x0800159f
 80014e8:	08001515 	.word	0x08001515
 80014ec:	0800159f 	.word	0x0800159f
 80014f0:	0800159f 	.word	0x0800159f
 80014f4:	0800159f 	.word	0x0800159f
 80014f8:	0800151d 	.word	0x0800151d
 80014fc:	0800159f 	.word	0x0800159f
 8001500:	0800159f 	.word	0x0800159f
 8001504:	0800159f 	.word	0x0800159f
 8001508:	08001525 	.word	0x08001525
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800150c:	4a32      	ldr	r2, [pc, #200]	; (80015d8 <SystemCoreClockUpdate+0x14c>)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	6013      	str	r3, [r2, #0]
      break;
 8001512:	e048      	b.n	80015a6 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001514:	4b30      	ldr	r3, [pc, #192]	; (80015d8 <SystemCoreClockUpdate+0x14c>)
 8001516:	4a31      	ldr	r2, [pc, #196]	; (80015dc <SystemCoreClockUpdate+0x150>)
 8001518:	601a      	str	r2, [r3, #0]
      break;
 800151a:	e044      	b.n	80015a6 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800151c:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <SystemCoreClockUpdate+0x14c>)
 800151e:	4a30      	ldr	r2, [pc, #192]	; (80015e0 <SystemCoreClockUpdate+0x154>)
 8001520:	601a      	str	r2, [r3, #0]
      break;
 8001522:	e040      	b.n	80015a6 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001524:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <SystemCoreClockUpdate+0x144>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800152e:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <SystemCoreClockUpdate+0x144>)
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	091b      	lsrs	r3, r3, #4
 8001534:	f003 030f 	and.w	r3, r3, #15
 8001538:	3301      	adds	r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d003      	beq.n	800154a <SystemCoreClockUpdate+0xbe>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2b03      	cmp	r3, #3
 8001546:	d006      	beq.n	8001556 <SystemCoreClockUpdate+0xca>
 8001548:	e00b      	b.n	8001562 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800154a:	4a24      	ldr	r2, [pc, #144]	; (80015dc <SystemCoreClockUpdate+0x150>)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001552:	613b      	str	r3, [r7, #16]
          break;
 8001554:	e00b      	b.n	800156e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001556:	4a22      	ldr	r2, [pc, #136]	; (80015e0 <SystemCoreClockUpdate+0x154>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	613b      	str	r3, [r7, #16]
          break;
 8001560:	e005      	b.n	800156e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	613b      	str	r3, [r7, #16]
          break;
 800156c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <SystemCoreClockUpdate+0x144>)
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	fb02 f303 	mul.w	r3, r2, r3
 800157e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <SystemCoreClockUpdate+0x144>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0e5b      	lsrs	r3, r3, #25
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	3301      	adds	r3, #1
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	fbb2 f3f3 	udiv	r3, r2, r3
 8001598:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <SystemCoreClockUpdate+0x14c>)
 800159a:	6013      	str	r3, [r2, #0]
      break;
 800159c:	e003      	b.n	80015a6 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <SystemCoreClockUpdate+0x14c>)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	6013      	str	r3, [r2, #0]
      break;
 80015a4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <SystemCoreClockUpdate+0x144>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	f003 030f 	and.w	r3, r3, #15
 80015b0:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <SystemCoreClockUpdate+0x158>)
 80015b2:	5cd3      	ldrb	r3, [r2, r3]
 80015b4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <SystemCoreClockUpdate+0x14c>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	fa22 f303 	lsr.w	r3, r2, r3
 80015c0:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <SystemCoreClockUpdate+0x14c>)
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	371c      	adds	r7, #28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	40021000 	.word	0x40021000
 80015d4:	08007b18 	.word	0x08007b18
 80015d8:	20000000 	.word	0x20000000
 80015dc:	00f42400 	.word	0x00f42400
 80015e0:	007a1200 	.word	0x007a1200
 80015e4:	08007b00 	.word	0x08007b00

080015e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80015e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001620 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015ec:	f7ff ff3c 	bl	8001468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015f2:	e003      	b.n	80015fc <LoopCopyDataInit>

080015f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80015f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015fa:	3104      	adds	r1, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015fc:	480a      	ldr	r0, [pc, #40]	; (8001628 <LoopForever+0xa>)
	ldr	r3, =_edata
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001600:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001602:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001604:	d3f6      	bcc.n	80015f4 <CopyDataInit>
	ldr	r2, =_sbss
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001608:	e002      	b.n	8001610 <LoopFillZerobss>

0800160a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800160a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800160c:	f842 3b04 	str.w	r3, [r2], #4

08001610 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <LoopForever+0x16>)
	cmp	r2, r3
 8001612:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001614:	d3f9      	bcc.n	800160a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001616:	f006 fa43 	bl	8007aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800161a:	f7fe ffcb 	bl	80005b4 <main>

0800161e <LoopForever>:

LoopForever:
    b LoopForever
 800161e:	e7fe      	b.n	800161e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001620:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001624:	08007b90 	.word	0x08007b90
	ldr	r0, =_sdata
 8001628:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800162c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001630:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001634:	200005c0 	.word	0x200005c0

08001638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001638:	e7fe      	b.n	8001638 <ADC1_2_IRQHandler>

0800163a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001644:	2004      	movs	r0, #4
 8001646:	f001 f8df 	bl	8002808 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800164a:	f7ff ff1f 	bl	800148c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800164e:	2000      	movs	r0, #0
 8001650:	f000 f80e 	bl	8001670 <HAL_InitTick>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d002      	beq.n	8001660 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	71fb      	strb	r3, [r7, #7]
 800165e:	e001      	b.n	8001664 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001660:	f7ff fbea 	bl	8000e38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001664:	79fb      	ldrb	r3, [r7, #7]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800167c:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_InitTick+0x6c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d023      	beq.n	80016cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <HAL_InitTick+0x70>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_InitTick+0x6c>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f001 f8e7 	bl	800286e <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10f      	bne.n	80016c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b07      	cmp	r3, #7
 80016aa:	d809      	bhi.n	80016c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f001 f8b3 	bl	800281e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016b8:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <HAL_InitTick+0x74>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e007      	b.n	80016d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e004      	b.n	80016d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
 80016ca:	e001      	b.n	80016d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x20>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x24>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_IncTick+0x24>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000008 	.word	0x20000008
 800170c:	200005bc 	.word	0x200005bc

08001710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <HAL_GetTick+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	200005bc 	.word	0x200005bc

08001728 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	609a      	str	r2, [r3, #8]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3360      	adds	r3, #96	; 0x60
 80017a2:	461a      	mov	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <LL_ADC_SetOffset+0x44>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	4313      	orrs	r3, r2
 80017c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017c8:	bf00      	nop
 80017ca:	371c      	adds	r7, #28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	03fff000 	.word	0x03fff000

080017d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3360      	adds	r3, #96	; 0x60
 80017e6:	461a      	mov	r2, r3
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001804:	b480      	push	{r7}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3360      	adds	r3, #96	; 0x60
 8001814:	461a      	mov	r2, r3
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	431a      	orrs	r2, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800182e:	bf00      	nop
 8001830:	371c      	adds	r7, #28
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	615a      	str	r2, [r3, #20]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3330      	adds	r3, #48	; 0x30
 8001870:	461a      	mov	r2, r3
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	4413      	add	r3, r2
 800187e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	211f      	movs	r1, #31
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	401a      	ands	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	0e9b      	lsrs	r3, r3, #26
 8001898:	f003 011f 	and.w	r1, r3, #31
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	431a      	orrs	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018ac:	bf00      	nop
 80018ae:	371c      	adds	r7, #28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3314      	adds	r3, #20
 80018c8:	461a      	mov	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	0e5b      	lsrs	r3, r3, #25
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	4413      	add	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	0d1b      	lsrs	r3, r3, #20
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	2107      	movs	r1, #7
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	401a      	ands	r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	0d1b      	lsrs	r3, r3, #20
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	431a      	orrs	r2, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001902:	bf00      	nop
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001928:	43db      	mvns	r3, r3
 800192a:	401a      	ands	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 0318 	and.w	r3, r3, #24
 8001932:	4908      	ldr	r1, [pc, #32]	; (8001954 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001934:	40d9      	lsrs	r1, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	400b      	ands	r3, r1
 800193a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800193e:	431a      	orrs	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	0007ffff 	.word	0x0007ffff

08001958 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001968:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6093      	str	r3, [r2, #8]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800198c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001990:	d101      	bne.n	8001996 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019e0:	d101      	bne.n	80019e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d101      	bne.n	8001a0c <LL_ADC_IsEnabled+0x18>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <LL_ADC_IsEnabled+0x1a>
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d101      	bne.n	8001a32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d101      	bne.n	8001a58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e12e      	b.n	8001ce0 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff f9f5 	bl	8000e80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff67 	bl	800197c <LL_ADC_IsDeepPowerDownEnabled>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff4d 	bl	8001958 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff ff82 	bl	80019cc <LL_ADC_IsInternalRegulatorEnabled>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d115      	bne.n	8001afa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff66 	bl	80019a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ad8:	4b83      	ldr	r3, [pc, #524]	; (8001ce8 <HAL_ADC_Init+0x280>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	099b      	lsrs	r3, r3, #6
 8001ade:	4a83      	ldr	r2, [pc, #524]	; (8001cec <HAL_ADC_Init+0x284>)
 8001ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae4:	099b      	lsrs	r3, r3, #6
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001aec:	e002      	b.n	8001af4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f9      	bne.n	8001aee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff64 	bl	80019cc <LL_ADC_IsInternalRegulatorEnabled>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10d      	bne.n	8001b26 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	f043 0210 	orr.w	r2, r3, #16
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1a:	f043 0201 	orr.w	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff75 	bl	8001a1a <LL_ADC_REG_IsConversionOngoing>
 8001b30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 80c7 	bne.w	8001cce <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f040 80c3 	bne.w	8001cce <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b50:	f043 0202 	orr.w	r2, r3, #2
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff49 	bl	80019f4 <LL_ADC_IsEnabled>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d110      	bne.n	8001b8a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b68:	4861      	ldr	r0, [pc, #388]	; (8001cf0 <HAL_ADC_Init+0x288>)
 8001b6a:	f7ff ff43 	bl	80019f4 <LL_ADC_IsEnabled>
 8001b6e:	4604      	mov	r4, r0
 8001b70:	4860      	ldr	r0, [pc, #384]	; (8001cf4 <HAL_ADC_Init+0x28c>)
 8001b72:	f7ff ff3f 	bl	80019f4 <LL_ADC_IsEnabled>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4323      	orrs	r3, r4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d105      	bne.n	8001b8a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4619      	mov	r1, r3
 8001b84:	485c      	ldr	r0, [pc, #368]	; (8001cf8 <HAL_ADC_Init+0x290>)
 8001b86:	f7ff fdcf 	bl	8001728 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	7e5b      	ldrb	r3, [r3, #25]
 8001b8e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b94:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b9a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001ba0:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba8:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d106      	bne.n	8001bc6 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	045b      	lsls	r3, r3, #17
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d009      	beq.n	8001be2 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	4b44      	ldr	r3, [pc, #272]	; (8001cfc <HAL_ADC_Init+0x294>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	69b9      	ldr	r1, [r7, #24]
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff20 	bl	8001a40 <LL_ADC_INJ_IsConversionOngoing>
 8001c00:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d140      	bne.n	8001c8a <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d13d      	bne.n	8001c8a <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7e1b      	ldrb	r3, [r3, #24]
 8001c16:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c18:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c20:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c30:	f023 0306 	bic.w	r3, r3, #6
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	69b9      	ldr	r1, [r7, #24]
 8001c3a:	430b      	orrs	r3, r1
 8001c3c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d118      	bne.n	8001c7a <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c52:	f023 0304 	bic.w	r3, r3, #4
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c5e:	4311      	orrs	r1, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c64:	4311      	orrs	r1, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	611a      	str	r2, [r3, #16]
 8001c78:	e007      	b.n	8001c8a <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0201 	bic.w	r2, r2, #1
 8001c88:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d10c      	bne.n	8001cac <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	f023 010f 	bic.w	r1, r3, #15
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	1e5a      	subs	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	631a      	str	r2, [r3, #48]	; 0x30
 8001caa:	e007      	b.n	8001cbc <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 020f 	bic.w	r2, r2, #15
 8001cba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	f023 0303 	bic.w	r3, r3, #3
 8001cc4:	f043 0201 	orr.w	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	659a      	str	r2, [r3, #88]	; 0x58
 8001ccc:	e007      	b.n	8001cde <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd2:	f043 0210 	orr.w	r2, r3, #16
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cde:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3724      	adds	r7, #36	; 0x24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd90      	pop	{r4, r7, pc}
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	053e2d63 	.word	0x053e2d63
 8001cf0:	42028000 	.word	0x42028000
 8001cf4:	42028100 	.word	0x42028100
 8001cf8:	42028300 	.word	0x42028300
 8001cfc:	fff0c007 	.word	0xfff0c007

08001d00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b0b7      	sub	sp, #220	; 0xdc
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x22>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e3c1      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x7a6>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fe73 	bl	8001a1a <LL_ADC_REG_IsConversionOngoing>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f040 83a6 	bne.w	8002488 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f7ff fd89 	bl	8001860 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fe61 	bl	8001a1a <LL_ADC_REG_IsConversionOngoing>
 8001d58:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fe6d 	bl	8001a40 <LL_ADC_INJ_IsConversionOngoing>
 8001d66:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 81c1 	bne.w	80020f6 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 81bc 	bne.w	80020f6 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d86:	d10f      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2200      	movs	r2, #0
 8001d92:	4619      	mov	r1, r3
 8001d94:	f7ff fd90 	bl	80018b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fd4a 	bl	800183a <LL_ADC_SetSamplingTimeCommonConfig>
 8001da6:	e00e      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	6819      	ldr	r1, [r3, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	461a      	mov	r2, r3
 8001db6:	f7ff fd7f 	bl	80018b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fd3a 	bl	800183a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	08db      	lsrs	r3, r3, #3
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d00a      	beq.n	8001dfe <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6919      	ldr	r1, [r3, #16]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001df8:	f7ff fcca 	bl	8001790 <LL_ADC_SetOffset>
 8001dfc:	e17b      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fce7 	bl	80017d8 <LL_ADC_GetOffsetChannel>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10a      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x12a>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fcdc 	bl	80017d8 <LL_ADC_GetOffsetChannel>
 8001e20:	4603      	mov	r3, r0
 8001e22:	0e9b      	lsrs	r3, r3, #26
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	e01e      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x168>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fcd1 	bl	80017d8 <LL_ADC_GetOffsetChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001e58:	2320      	movs	r3, #32
 8001e5a:	e004      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001e5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x180>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	0e9b      	lsrs	r3, r3, #26
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	e018      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x1b2>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001ea4:	2320      	movs	r3, #32
 8001ea6:	e004      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001ea8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d106      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fca0 	bl	8001804 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2101      	movs	r1, #1
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fc84 	bl	80017d8 <LL_ADC_GetOffsetChannel>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10a      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x1f0>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2101      	movs	r1, #1
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fc79 	bl	80017d8 <LL_ADC_GetOffsetChannel>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	0e9b      	lsrs	r3, r3, #26
 8001eea:	f003 021f 	and.w	r2, r3, #31
 8001eee:	e01e      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x22e>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fc6e 	bl	80017d8 <LL_ADC_GetOffsetChannel>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001f1e:	2320      	movs	r3, #32
 8001f20:	e004      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001f22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d105      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x246>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	0e9b      	lsrs	r3, r3, #26
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	e018      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x278>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001f6a:	2320      	movs	r3, #32
 8001f6c:	e004      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001f6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d106      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2200      	movs	r2, #0
 8001f82:	2101      	movs	r1, #1
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fc3d 	bl	8001804 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2102      	movs	r1, #2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fc21 	bl	80017d8 <LL_ADC_GetOffsetChannel>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10a      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x2b6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fc16 	bl	80017d8 <LL_ADC_GetOffsetChannel>
 8001fac:	4603      	mov	r3, r0
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	f003 021f 	and.w	r2, r3, #31
 8001fb4:	e01e      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x2f4>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2102      	movs	r1, #2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fc0b 	bl	80017d8 <LL_ADC_GetOffsetChannel>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001fdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001fe4:	2320      	movs	r3, #32
 8001fe6:	e004      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001fe8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <HAL_ADC_ConfigChannel+0x30c>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	0e9b      	lsrs	r3, r3, #26
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	e016      	b.n	800203a <HAL_ADC_ConfigChannel+0x33a>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800201e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 800202c:	2320      	movs	r3, #32
 800202e:	e004      	b.n	800203a <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8002030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800203a:	429a      	cmp	r2, r3
 800203c:	d106      	bne.n	800204c <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2200      	movs	r2, #0
 8002044:	2102      	movs	r1, #2
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fbdc 	bl	8001804 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2103      	movs	r1, #3
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fbc0 	bl	80017d8 <LL_ADC_GetOffsetChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10a      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x378>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2103      	movs	r1, #3
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fbb5 	bl	80017d8 <LL_ADC_GetOffsetChannel>
 800206e:	4603      	mov	r3, r0
 8002070:	0e9b      	lsrs	r3, r3, #26
 8002072:	f003 021f 	and.w	r2, r3, #31
 8002076:	e017      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x3a8>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2103      	movs	r1, #3
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fbaa 	bl	80017d8 <LL_ADC_GetOffsetChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002092:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800209a:	2320      	movs	r3, #32
 800209c:	e003      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800209e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d105      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x3c0>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	0e9b      	lsrs	r3, r3, #26
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	e011      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x3e4>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80020ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80020d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 80020d8:	2320      	movs	r3, #32
 80020da:	e003      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80020dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d106      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2200      	movs	r2, #0
 80020ee:	2103      	movs	r1, #3
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fb87 	bl	8001804 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fc7a 	bl	80019f4 <LL_ADC_IsEnabled>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	f040 81c9 	bne.w	800249a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	6819      	ldr	r1, [r3, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	461a      	mov	r2, r3
 8002116:	f7ff fbfb 	bl	8001910 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	4a8f      	ldr	r2, [pc, #572]	; (800235c <HAL_ADC_ConfigChannel+0x65c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	f040 8131 	bne.w	8002388 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10b      	bne.n	800214e <HAL_ADC_ConfigChannel+0x44e>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	0e9b      	lsrs	r3, r3, #26
 800213c:	3301      	adds	r3, #1
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	2b09      	cmp	r3, #9
 8002144:	bf94      	ite	ls
 8002146:	2301      	movls	r3, #1
 8002148:	2300      	movhi	r3, #0
 800214a:	b2db      	uxtb	r3, r3
 800214c:	e019      	b.n	8002182 <HAL_ADC_ConfigChannel+0x482>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800215c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800215e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002166:	2320      	movs	r3, #32
 8002168:	e003      	b.n	8002172 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800216a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800216c:	fab3 f383 	clz	r3, r3
 8002170:	b2db      	uxtb	r3, r3
 8002172:	3301      	adds	r3, #1
 8002174:	f003 031f 	and.w	r3, r3, #31
 8002178:	2b09      	cmp	r3, #9
 800217a:	bf94      	ite	ls
 800217c:	2301      	movls	r3, #1
 800217e:	2300      	movhi	r3, #0
 8002180:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002182:	2b00      	cmp	r3, #0
 8002184:	d079      	beq.n	800227a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218e:	2b00      	cmp	r3, #0
 8002190:	d107      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x4a2>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	0e9b      	lsrs	r3, r3, #26
 8002198:	3301      	adds	r3, #1
 800219a:	069b      	lsls	r3, r3, #26
 800219c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021a0:	e015      	b.n	80021ce <HAL_ADC_ConfigChannel+0x4ce>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80021b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80021ba:	2320      	movs	r3, #32
 80021bc:	e003      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80021be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c0:	fab3 f383 	clz	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	069b      	lsls	r3, r3, #26
 80021ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x4ee>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	0e9b      	lsrs	r3, r3, #26
 80021e0:	3301      	adds	r3, #1
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	2101      	movs	r1, #1
 80021e8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ec:	e017      	b.n	800221e <HAL_ADC_ConfigChannel+0x51e>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80021fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002206:	2320      	movs	r3, #32
 8002208:	e003      	b.n	8002212 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 800220a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800220c:	fab3 f383 	clz	r3, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	3301      	adds	r3, #1
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	2101      	movs	r1, #1
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	ea42 0103 	orr.w	r1, r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10a      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x544>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	0e9b      	lsrs	r3, r3, #26
 8002234:	3301      	adds	r3, #1
 8002236:	f003 021f 	and.w	r2, r3, #31
 800223a:	4613      	mov	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4413      	add	r3, r2
 8002240:	051b      	lsls	r3, r3, #20
 8002242:	e018      	b.n	8002276 <HAL_ADC_ConfigChannel+0x576>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002254:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800225c:	2320      	movs	r3, #32
 800225e:	e003      	b.n	8002268 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	3301      	adds	r3, #1
 800226a:	f003 021f 	and.w	r2, r3, #31
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002276:	430b      	orrs	r3, r1
 8002278:	e081      	b.n	800237e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002282:	2b00      	cmp	r3, #0
 8002284:	d107      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x596>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	0e9b      	lsrs	r3, r3, #26
 800228c:	3301      	adds	r3, #1
 800228e:	069b      	lsls	r3, r3, #26
 8002290:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002294:	e015      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x5c2>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80022a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80022ae:	2320      	movs	r3, #32
 80022b0:	e003      	b.n	80022ba <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	3301      	adds	r3, #1
 80022bc:	069b      	lsls	r3, r3, #26
 80022be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x5e2>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	0e9b      	lsrs	r3, r3, #26
 80022d4:	3301      	adds	r3, #1
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	2101      	movs	r1, #1
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	e017      	b.n	8002312 <HAL_ADC_ConfigChannel+0x612>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	61fb      	str	r3, [r7, #28]
  return result;
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80022fa:	2320      	movs	r3, #32
 80022fc:	e003      	b.n	8002306 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	3301      	adds	r3, #1
 8002308:	f003 031f 	and.w	r3, r3, #31
 800230c:	2101      	movs	r1, #1
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	ea42 0103 	orr.w	r1, r2, r3
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10d      	bne.n	800233e <HAL_ADC_ConfigChannel+0x63e>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	0e9b      	lsrs	r3, r3, #26
 8002328:	3301      	adds	r3, #1
 800232a:	f003 021f 	and.w	r2, r3, #31
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	3b1e      	subs	r3, #30
 8002336:	051b      	lsls	r3, r3, #20
 8002338:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800233c:	e01e      	b.n	800237c <HAL_ADC_ConfigChannel+0x67c>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	613b      	str	r3, [r7, #16]
  return result;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d104      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002356:	2320      	movs	r3, #32
 8002358:	e006      	b.n	8002368 <HAL_ADC_ConfigChannel+0x668>
 800235a:	bf00      	nop
 800235c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	3301      	adds	r3, #1
 800236a:	f003 021f 	and.w	r2, r3, #31
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	3b1e      	subs	r3, #30
 8002376:	051b      	lsls	r3, r3, #20
 8002378:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800237c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002382:	4619      	mov	r1, r3
 8002384:	f7ff fa98 	bl	80018b8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b48      	ldr	r3, [pc, #288]	; (80024b0 <HAL_ADC_ConfigChannel+0x7b0>)
 800238e:	4013      	ands	r3, r2
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 8082 	beq.w	800249a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002396:	4847      	ldr	r0, [pc, #284]	; (80024b4 <HAL_ADC_ConfigChannel+0x7b4>)
 8002398:	f7ff f9ec 	bl	8001774 <LL_ADC_GetCommonPathInternalCh>
 800239c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023a0:	4845      	ldr	r0, [pc, #276]	; (80024b8 <HAL_ADC_ConfigChannel+0x7b8>)
 80023a2:	f7ff fb27 	bl	80019f4 <LL_ADC_IsEnabled>
 80023a6:	4604      	mov	r4, r0
 80023a8:	4844      	ldr	r0, [pc, #272]	; (80024bc <HAL_ADC_ConfigChannel+0x7bc>)
 80023aa:	f7ff fb23 	bl	80019f4 <LL_ADC_IsEnabled>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4323      	orrs	r3, r4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d15e      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a41      	ldr	r2, [pc, #260]	; (80024c0 <HAL_ADC_ConfigChannel+0x7c0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d127      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d121      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a39      	ldr	r2, [pc, #228]	; (80024b8 <HAL_ADC_ConfigChannel+0x7b8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d161      	bne.n	800249a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023de:	4619      	mov	r1, r3
 80023e0:	4834      	ldr	r0, [pc, #208]	; (80024b4 <HAL_ADC_ConfigChannel+0x7b4>)
 80023e2:	f7ff f9b4 	bl	800174e <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023e6:	4b37      	ldr	r3, [pc, #220]	; (80024c4 <HAL_ADC_ConfigChannel+0x7c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	099b      	lsrs	r3, r3, #6
 80023ec:	4a36      	ldr	r2, [pc, #216]	; (80024c8 <HAL_ADC_ConfigChannel+0x7c8>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	099b      	lsrs	r3, r3, #6
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80023fe:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002400:	e002      	b.n	8002408 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	3b01      	subs	r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f9      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800240e:	e044      	b.n	800249a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a2d      	ldr	r2, [pc, #180]	; (80024cc <HAL_ADC_ConfigChannel+0x7cc>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d113      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800241a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800241e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10d      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a23      	ldr	r2, [pc, #140]	; (80024b8 <HAL_ADC_ConfigChannel+0x7b8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d134      	bne.n	800249a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002430:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002438:	4619      	mov	r1, r3
 800243a:	481e      	ldr	r0, [pc, #120]	; (80024b4 <HAL_ADC_ConfigChannel+0x7b4>)
 800243c:	f7ff f987 	bl	800174e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002440:	e02b      	b.n	800249a <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a22      	ldr	r2, [pc, #136]	; (80024d0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d126      	bne.n	800249a <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800244c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d120      	bne.n	800249a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <HAL_ADC_ConfigChannel+0x7b8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d11b      	bne.n	800249a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002462:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002466:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800246a:	4619      	mov	r1, r3
 800246c:	4811      	ldr	r0, [pc, #68]	; (80024b4 <HAL_ADC_ConfigChannel+0x7b4>)
 800246e:	f7ff f96e 	bl	800174e <LL_ADC_SetCommonPathInternalCh>
 8002472:	e012      	b.n	800249a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	f043 0220 	orr.w	r2, r3, #32
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002486:	e008      	b.n	800249a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	f043 0220 	orr.w	r2, r3, #32
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80024a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	37dc      	adds	r7, #220	; 0xdc
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}
 80024ae:	bf00      	nop
 80024b0:	80080000 	.word	0x80080000
 80024b4:	42028300 	.word	0x42028300
 80024b8:	42028000 	.word	0x42028000
 80024bc:	42028100 	.word	0x42028100
 80024c0:	c7520000 	.word	0xc7520000
 80024c4:	20000000 	.word	0x20000000
 80024c8:	053e2d63 	.word	0x053e2d63
 80024cc:	cb840000 	.word	0xcb840000
 80024d0:	80000001 	.word	0x80000001

080024d4 <LL_ADC_IsEnabled>:
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <LL_ADC_IsEnabled+0x18>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <LL_ADC_IsEnabled+0x1a>
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <LL_ADC_REG_IsConversionOngoing>:
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b04      	cmp	r3, #4
 800250c:	d101      	bne.n	8002512 <LL_ADC_REG_IsConversionOngoing+0x18>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b0a1      	sub	sp, #132	; 0x84
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800253a:	2302      	movs	r3, #2
 800253c:	e089      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002546:	2300      	movs	r3, #0
 8002548:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800254a:	2300      	movs	r3, #0
 800254c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a42      	ldr	r2, [pc, #264]	; (800265c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d102      	bne.n	800255e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002558:	4b41      	ldr	r3, [pc, #260]	; (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e001      	b.n	8002562 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10b      	bne.n	8002580 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256c:	f043 0220 	orr.w	r2, r3, #32
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e068      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ffb9 	bl	80024fa <LL_ADC_REG_IsConversionOngoing>
 8002588:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ffb3 	bl	80024fa <LL_ADC_REG_IsConversionOngoing>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d14a      	bne.n	8002630 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800259a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800259c:	2b00      	cmp	r3, #0
 800259e:	d147      	bne.n	8002630 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025a0:	4b30      	ldr	r3, [pc, #192]	; (8002664 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80025a2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d027      	beq.n	80025fc <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80025ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025be:	035b      	lsls	r3, r3, #13
 80025c0:	430b      	orrs	r3, r1
 80025c2:	431a      	orrs	r2, r3
 80025c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025c8:	4824      	ldr	r0, [pc, #144]	; (800265c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80025ca:	f7ff ff83 	bl	80024d4 <LL_ADC_IsEnabled>
 80025ce:	4604      	mov	r4, r0
 80025d0:	4823      	ldr	r0, [pc, #140]	; (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80025d2:	f7ff ff7f 	bl	80024d4 <LL_ADC_IsEnabled>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4323      	orrs	r3, r4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d132      	bne.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025e6:	f023 030f 	bic.w	r3, r3, #15
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	6811      	ldr	r1, [r2, #0]
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	6892      	ldr	r2, [r2, #8]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	431a      	orrs	r2, r3
 80025f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025f8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025fa:	e023      	b.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002606:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002608:	4814      	ldr	r0, [pc, #80]	; (800265c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800260a:	f7ff ff63 	bl	80024d4 <LL_ADC_IsEnabled>
 800260e:	4604      	mov	r4, r0
 8002610:	4813      	ldr	r0, [pc, #76]	; (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002612:	f7ff ff5f 	bl	80024d4 <LL_ADC_IsEnabled>
 8002616:	4603      	mov	r3, r0
 8002618:	4323      	orrs	r3, r4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d112      	bne.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800261e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002626:	f023 030f 	bic.w	r3, r3, #15
 800262a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800262c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800262e:	e009      	b.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	f043 0220 	orr.w	r2, r3, #32
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002642:	e000      	b.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002644:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800264e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002652:	4618      	mov	r0, r3
 8002654:	3784      	adds	r7, #132	; 0x84
 8002656:	46bd      	mov	sp, r7
 8002658:	bd90      	pop	{r4, r7, pc}
 800265a:	bf00      	nop
 800265c:	42028000 	.word	0x42028000
 8002660:	42028100 	.word	0x42028100
 8002664:	42028300 	.word	0x42028300

08002668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002684:	4013      	ands	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269a:	4a04      	ldr	r2, [pc, #16]	; (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	60d3      	str	r3, [r2, #12]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <__NVIC_GetPriorityGrouping+0x18>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	f003 0307 	and.w	r3, r3, #7
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	db0b      	blt.n	80026f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	4907      	ldr	r1, [pc, #28]	; (8002704 <__NVIC_EnableIRQ+0x38>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	2001      	movs	r0, #1
 80026ee:	fa00 f202 	lsl.w	r2, r0, r2
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000e100 	.word	0xe000e100

08002708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	db0a      	blt.n	8002732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	490c      	ldr	r1, [pc, #48]	; (8002754 <__NVIC_SetPriority+0x4c>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	0152      	lsls	r2, r2, #5
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	440b      	add	r3, r1
 800272c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002730:	e00a      	b.n	8002748 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4908      	ldr	r1, [pc, #32]	; (8002758 <__NVIC_SetPriority+0x50>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	3b04      	subs	r3, #4
 8002740:	0152      	lsls	r2, r2, #5
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	440b      	add	r3, r1
 8002746:	761a      	strb	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000e100 	.word	0xe000e100
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f1c3 0307 	rsb	r3, r3, #7
 8002776:	2b03      	cmp	r3, #3
 8002778:	bf28      	it	cs
 800277a:	2303      	movcs	r3, #3
 800277c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3303      	adds	r3, #3
 8002782:	2b06      	cmp	r3, #6
 8002784:	d902      	bls.n	800278c <NVIC_EncodePriority+0x30>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3b04      	subs	r3, #4
 800278a:	e000      	b.n	800278e <NVIC_EncodePriority+0x32>
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	f04f 32ff 	mov.w	r2, #4294967295
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	401a      	ands	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43d9      	mvns	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	4313      	orrs	r3, r2
         );
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d4:	d301      	bcc.n	80027da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d6:	2301      	movs	r3, #1
 80027d8:	e00f      	b.n	80027fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <SysTick_Config+0x40>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e2:	2107      	movs	r1, #7
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	f7ff ff8e 	bl	8002708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <SysTick_Config+0x40>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f2:	4b04      	ldr	r3, [pc, #16]	; (8002804 <SysTick_Config+0x40>)
 80027f4:	2207      	movs	r2, #7
 80027f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	e000e010 	.word	0xe000e010

08002808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ff29 	bl	8002668 <__NVIC_SetPriorityGrouping>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800282c:	f7ff ff40 	bl	80026b0 <__NVIC_GetPriorityGrouping>
 8002830:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	6978      	ldr	r0, [r7, #20]
 8002838:	f7ff ff90 	bl	800275c <NVIC_EncodePriority>
 800283c:	4602      	mov	r2, r0
 800283e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff5f 	bl	8002708 <__NVIC_SetPriority>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff33 	bl	80026cc <__NVIC_EnableIRQ>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffa4 	bl	80027c4 <SysTick_Config>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e08d      	b.n	80029b6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	4b47      	ldr	r3, [pc, #284]	; (80029c0 <HAL_DMA_Init+0x138>)
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d80f      	bhi.n	80028c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b45      	ldr	r3, [pc, #276]	; (80029c4 <HAL_DMA_Init+0x13c>)
 80028ae:	4413      	add	r3, r2
 80028b0:	4a45      	ldr	r2, [pc, #276]	; (80029c8 <HAL_DMA_Init+0x140>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	009a      	lsls	r2, r3, #2
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a42      	ldr	r2, [pc, #264]	; (80029cc <HAL_DMA_Init+0x144>)
 80028c2:	649a      	str	r2, [r3, #72]	; 0x48
 80028c4:	e00e      	b.n	80028e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	4b40      	ldr	r3, [pc, #256]	; (80029d0 <HAL_DMA_Init+0x148>)
 80028ce:	4413      	add	r3, r2
 80028d0:	4a3d      	ldr	r2, [pc, #244]	; (80029c8 <HAL_DMA_Init+0x140>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	091b      	lsrs	r3, r3, #4
 80028d8:	009a      	lsls	r2, r3, #2
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a3c      	ldr	r2, [pc, #240]	; (80029d4 <HAL_DMA_Init+0x14c>)
 80028e2:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 80028fa:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80028fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002908:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002914:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002920:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fa3a 	bl	8002db0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002944:	d102      	bne.n	800294c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002960:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d010      	beq.n	800298c <HAL_DMA_Init+0x104>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b04      	cmp	r3, #4
 8002970:	d80c      	bhi.n	800298c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fa5a 	bl	8002e2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	e008      	b.n	800299e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40020407 	.word	0x40020407
 80029c4:	bffdfff8 	.word	0xbffdfff8
 80029c8:	cccccccd 	.word	0xcccccccd
 80029cc:	40020000 	.word	0x40020000
 80029d0:	bffdfbf8 	.word	0xbffdfbf8
 80029d4:	40020400 	.word	0x40020400

080029d8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d008      	beq.n	8002a02 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2204      	movs	r2, #4
 80029f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e040      	b.n	8002a84 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 020e 	bic.w	r2, r2, #14
 8002a10:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0201 	bic.w	r2, r2, #1
 8002a30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a36:	f003 021c 	and.w	r2, r3, #28
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a3e:	2101      	movs	r1, #1
 8002a40:	fa01 f202 	lsl.w	r2, r1, r2
 8002a44:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002a4e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00c      	beq.n	8002a72 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002a70:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d005      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2204      	movs	r2, #4
 8002aac:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
 8002ab2:	e047      	b.n	8002b44 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 020e 	bic.w	r2, r2, #14
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ade:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ae2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae8:	f003 021c 	and.w	r2, r3, #28
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af0:	2101      	movs	r1, #1
 8002af2:	fa01 f202 	lsl.w	r2, r1, r2
 8002af6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002b00:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00c      	beq.n	8002b24 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002b22:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	4798      	blx	r3
    }
  }
  return status;
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6a:	f003 031c 	and.w	r3, r3, #28
 8002b6e:	2204      	movs	r2, #4
 8002b70:	409a      	lsls	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d053      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xd4>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d04e      	beq.n	8002c22 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d024      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b96:	f003 021c 	and.w	r2, r3, #28
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b9e:	2104      	movs	r1, #4
 8002ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba4:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d109      	bne.n	8002bc8 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80c0 	beq.w	8002d3e <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002bc6:	e0ba      	b.n	8002d3e <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80b6 	beq.w	8002d3e <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002bda:	e0b0      	b.n	8002d3e <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d107      	bne.n	8002bfa <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0204 	bic.w	r2, r2, #4
 8002bf8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfe:	f003 021c 	and.w	r2, r3, #28
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c06:	2104      	movs	r1, #4
 8002c08:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 8093 	beq.w	8002d3e <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002c20:	e08d      	b.n	8002d3e <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	f003 031c 	and.w	r3, r3, #28
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d04e      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x186>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d049      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d018      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d108      	bne.n	8002c6e <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d06e      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002c6c:	e069      	b.n	8002d42 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d065      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002c7e:	e060      	b.n	8002d42 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10b      	bne.n	8002ca6 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 020a 	bic.w	r2, r2, #10
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002caa:	f003 021c 	and.w	r2, r3, #28
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb2:	2102      	movs	r1, #2
 8002cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb8:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d03b      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002cd2:	e036      	b.n	8002d42 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd8:	f003 031c 	and.w	r3, r3, #28
 8002cdc:	2208      	movs	r2, #8
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d02e      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x1f8>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d029      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 020e 	bic.w	r2, r2, #14
 8002d00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d06:	f003 021c 	and.w	r2, r3, #28
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d0e:	2101      	movs	r1, #1
 8002d10:	fa01 f202 	lsl.w	r2, r1, r2
 8002d14:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d3c:	e002      	b.n	8002d44 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002d3e:	bf00      	nop
 8002d40:	e000      	b.n	8002d44 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002d42:	bf00      	nop
  return;
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
}
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d103      	bne.n	8002d6a <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	72fb      	strb	r3, [r7, #11]
    return status;
 8002d66:	7afb      	ldrb	r3, [r7, #11]
 8002d68:	e01b      	b.n	8002da2 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d004      	beq.n	8002d90 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	e003      	b.n	8002d98 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d96:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	601a      	str	r2, [r3, #0]

  return status;
 8002da0:	7afb      	ldrb	r3, [r7, #11]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d80a      	bhi.n	8002dda <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc8:	089b      	lsrs	r3, r3, #2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dd0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6513      	str	r3, [r2, #80]	; 0x50
 8002dd8:	e007      	b.n	8002dea <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dde:	089b      	lsrs	r3, r3, #2
 8002de0:	009a      	lsls	r2, r3, #2
 8002de2:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002de4:	4413      	add	r3, r2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	3b08      	subs	r3, #8
 8002df2:	4a0c      	ldr	r2, [pc, #48]	; (8002e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002df4:	fba2 2303 	umull	r2, r3, r2, r3
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002e00:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	2201      	movs	r2, #1
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	40020407 	.word	0x40020407
 8002e20:	40020820 	.word	0x40020820
 8002e24:	cccccccd 	.word	0xcccccccd
 8002e28:	40020880 	.word	0x40020880

08002e2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	461a      	mov	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a08      	ldr	r2, [pc, #32]	; (8002e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	2201      	movs	r2, #1
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	1000823f 	.word	0x1000823f
 8002e70:	40020940 	.word	0x40020940

08002e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e82:	e158      	b.n	8003136 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	2101      	movs	r1, #1
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	4013      	ands	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 814a 	beq.w	8003130 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d005      	beq.n	8002eb4 <HAL_GPIO_Init+0x40>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d130      	bne.n	8002f16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eea:	2201      	movs	r2, #1
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	091b      	lsrs	r3, r3, #4
 8002f00:	f003 0201 	and.w	r2, r3, #1
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d017      	beq.n	8002f52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4013      	ands	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d123      	bne.n	8002fa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	08da      	lsrs	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3208      	adds	r2, #8
 8002f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	220f      	movs	r2, #15
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	08da      	lsrs	r2, r3, #3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3208      	adds	r2, #8
 8002fa0:	6939      	ldr	r1, [r7, #16]
 8002fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 0203 	and.w	r2, r3, #3
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 80a4 	beq.w	8003130 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002fe8:	4a5a      	ldr	r2, [pc, #360]	; (8003154 <HAL_GPIO_Init+0x2e0>)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	089b      	lsrs	r3, r3, #2
 8002fee:	3318      	adds	r3, #24
 8002ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	220f      	movs	r2, #15
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a52      	ldr	r2, [pc, #328]	; (8003158 <HAL_GPIO_Init+0x2e4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d025      	beq.n	8003060 <HAL_GPIO_Init+0x1ec>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a51      	ldr	r2, [pc, #324]	; (800315c <HAL_GPIO_Init+0x2e8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d01f      	beq.n	800305c <HAL_GPIO_Init+0x1e8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a50      	ldr	r2, [pc, #320]	; (8003160 <HAL_GPIO_Init+0x2ec>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d019      	beq.n	8003058 <HAL_GPIO_Init+0x1e4>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a4f      	ldr	r2, [pc, #316]	; (8003164 <HAL_GPIO_Init+0x2f0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d013      	beq.n	8003054 <HAL_GPIO_Init+0x1e0>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a4e      	ldr	r2, [pc, #312]	; (8003168 <HAL_GPIO_Init+0x2f4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00d      	beq.n	8003050 <HAL_GPIO_Init+0x1dc>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a4d      	ldr	r2, [pc, #308]	; (800316c <HAL_GPIO_Init+0x2f8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <HAL_GPIO_Init+0x1d8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a4c      	ldr	r2, [pc, #304]	; (8003170 <HAL_GPIO_Init+0x2fc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d101      	bne.n	8003048 <HAL_GPIO_Init+0x1d4>
 8003044:	2306      	movs	r3, #6
 8003046:	e00c      	b.n	8003062 <HAL_GPIO_Init+0x1ee>
 8003048:	2307      	movs	r3, #7
 800304a:	e00a      	b.n	8003062 <HAL_GPIO_Init+0x1ee>
 800304c:	2305      	movs	r3, #5
 800304e:	e008      	b.n	8003062 <HAL_GPIO_Init+0x1ee>
 8003050:	2304      	movs	r3, #4
 8003052:	e006      	b.n	8003062 <HAL_GPIO_Init+0x1ee>
 8003054:	2303      	movs	r3, #3
 8003056:	e004      	b.n	8003062 <HAL_GPIO_Init+0x1ee>
 8003058:	2302      	movs	r3, #2
 800305a:	e002      	b.n	8003062 <HAL_GPIO_Init+0x1ee>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_GPIO_Init+0x1ee>
 8003060:	2300      	movs	r3, #0
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	f002 0203 	and.w	r2, r2, #3
 8003068:	00d2      	lsls	r2, r2, #3
 800306a:	4093      	lsls	r3, r2
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8003072:	4938      	ldr	r1, [pc, #224]	; (8003154 <HAL_GPIO_Init+0x2e0>)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	089b      	lsrs	r3, r3, #2
 8003078:	3318      	adds	r3, #24
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003080:	4b34      	ldr	r3, [pc, #208]	; (8003154 <HAL_GPIO_Init+0x2e0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	43db      	mvns	r3, r3
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4013      	ands	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030a4:	4a2b      	ldr	r2, [pc, #172]	; (8003154 <HAL_GPIO_Init+0x2e0>)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80030aa:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <HAL_GPIO_Init+0x2e0>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030ce:	4a21      	ldr	r2, [pc, #132]	; (8003154 <HAL_GPIO_Init+0x2e0>)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030d4:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <HAL_GPIO_Init+0x2e0>)
 80030d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	43db      	mvns	r3, r3
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4013      	ands	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030fa:	4a16      	ldr	r2, [pc, #88]	; (8003154 <HAL_GPIO_Init+0x2e0>)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8003102:	4b14      	ldr	r3, [pc, #80]	; (8003154 <HAL_GPIO_Init+0x2e0>)
 8003104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	43db      	mvns	r3, r3
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003128:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <HAL_GPIO_Init+0x2e0>)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	3301      	adds	r3, #1
 8003134:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	f47f ae9f 	bne.w	8002e84 <HAL_GPIO_Init+0x10>
  }
}
 8003146:	bf00      	nop
 8003148:	bf00      	nop
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	4002f400 	.word	0x4002f400
 8003158:	42020000 	.word	0x42020000
 800315c:	42020400 	.word	0x42020400
 8003160:	42020800 	.word	0x42020800
 8003164:	42020c00 	.word	0x42020c00
 8003168:	42021000 	.word	0x42021000
 800316c:	42021400 	.word	0x42021400
 8003170:	42021800 	.word	0x42021800

08003174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	807b      	strh	r3, [r7, #2]
 8003180:	4613      	mov	r3, r2
 8003182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003184:	787b      	ldrb	r3, [r7, #1]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003190:	e002      	b.n	8003198 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003192:	887a      	ldrh	r2, [r7, #2]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
 80031c0:	e007      	b.n	80031d2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80031c2:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 0204 	bic.w	r2, r3, #4
 80031ca:	4905      	ldr	r1, [pc, #20]	; (80031e0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	40030400 	.word	0x40030400

080031e4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_ICACHE_Enable+0x1c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a04      	ldr	r2, [pc, #16]	; (8003200 <HAL_ICACHE_Enable+0x1c>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	40030400 	.word	0x40030400

08003204 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e0c0      	b.n	8003398 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fe f86a 	bl	8001304 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2203      	movs	r2, #3
 8003234:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f004 fbed 	bl	8007a1c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003242:	2300      	movs	r3, #0
 8003244:	73fb      	strb	r3, [r7, #15]
 8003246:	e03e      	b.n	80032c6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	440b      	add	r3, r1
 8003256:	3311      	adds	r3, #17
 8003258:	2201      	movs	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	440b      	add	r3, r1
 800326a:	3310      	adds	r3, #16
 800326c:	7bfa      	ldrb	r2, [r7, #15]
 800326e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003270:	7bfa      	ldrb	r2, [r7, #15]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	440b      	add	r3, r1
 800327e:	3313      	adds	r3, #19
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	440b      	add	r3, r1
 8003292:	3320      	adds	r3, #32
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003298:	7bfa      	ldrb	r2, [r7, #15]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	440b      	add	r3, r1
 80032a6:	3324      	adds	r3, #36	; 0x24
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	3301      	adds	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	791b      	ldrb	r3, [r3, #4]
 80032ca:	7bfa      	ldrb	r2, [r7, #15]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d3bb      	bcc.n	8003248 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]
 80032d4:	e044      	b.n	8003360 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	440b      	add	r3, r1
 80032e4:	f203 1351 	addw	r3, r3, #337	; 0x151
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	440b      	add	r3, r1
 80032fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	440b      	add	r3, r1
 8003310:	f203 1353 	addw	r3, r3, #339	; 0x153
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	440b      	add	r3, r1
 8003326:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800332e:	7bfa      	ldrb	r2, [r7, #15]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	440b      	add	r3, r1
 800333c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	440b      	add	r3, r1
 8003352:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	3301      	adds	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	791b      	ldrb	r3, [r3, #4]
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	429a      	cmp	r2, r3
 8003368:	d3b5      	bcc.n	80032d6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3304      	adds	r3, #4
 8003372:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003376:	f004 fb6c 	bl	8007a52 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	7a9b      	ldrb	r3, [r3, #10]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d102      	bne.n	8003396 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f805 	bl	80033a0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80033d8:	b29b      	uxth	r3, r3
 80033da:	f043 0302 	orr.w	r3, r3, #2
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a04      	ldr	r2, [pc, #16]	; (8003410 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003402:	6013      	str	r3, [r2, #0]
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40007000 	.word	0x40007000

08003414 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003418:	4b04      	ldr	r3, [pc, #16]	; (800342c <HAL_PWREx_GetVoltageRange+0x18>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003420:	4618      	mov	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	40007000 	.word	0x40007000

08003430 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003438:	4b27      	ldr	r3, [pc, #156]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003440:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8003442:	f000 f861 	bl	8003508 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003446:	4603      	mov	r3, r0
 8003448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344c:	d101      	bne.n	8003452 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e03e      	b.n	80034d0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003452:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800345a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800345e:	d101      	bne.n	8003464 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e035      	b.n	80034d0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	429a      	cmp	r2, r3
 800346a:	d101      	bne.n	8003470 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	e02f      	b.n	80034d0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003470:	4b19      	ldr	r3, [pc, #100]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003478:	4917      	ldr	r1, [pc, #92]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003480:	4b16      	ldr	r3, [pc, #88]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	4a16      	ldr	r2, [pc, #88]	; (80034e0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003488:	fba2 2303 	umull	r2, r3, r2, r3
 800348c:	09db      	lsrs	r3, r3, #7
 800348e:	2232      	movs	r2, #50	; 0x32
 8003490:	fb02 f303 	mul.w	r3, r2, r3
 8003494:	4a13      	ldr	r2, [pc, #76]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	08db      	lsrs	r3, r3, #3
 800349c:	3301      	adds	r3, #1
 800349e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a0:	e002      	b.n	80034a8 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a8:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b4:	d102      	bne.n	80034bc <HAL_PWREx_ControlVoltageScaling+0x8c>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f2      	bne.n	80034a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c8:	d101      	bne.n	80034ce <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e000      	b.n	80034d0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40007000 	.word	0x40007000
 80034dc:	20000000 	.word	0x20000000
 80034e0:	0a7c5ac5 	.word	0x0a7c5ac5
 80034e4:	cccccccd 	.word	0xcccccccd

080034e8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_PWREx_EnableVddIO2+0x1c>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	4a04      	ldr	r2, [pc, #16]	; (8003504 <HAL_PWREx_EnableVddIO2+0x1c>)
 80034f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034f6:	6053      	str	r3, [r2, #4]
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40007000 	.word	0x40007000

08003508 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800350e:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800351e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	e00a      	b.n	800353c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d103      	bne.n	8003538 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003530:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003534:	607b      	str	r3, [r7, #4]
 8003536:	e001      	b.n	800353c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003538:	2300      	movs	r3, #0
 800353a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800353c:	687b      	ldr	r3, [r7, #4]
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40007000 	.word	0x40007000

08003550 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d102      	bne.n	8003564 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	f000 bcc2 	b.w	8003ee8 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003564:	4b99      	ldr	r3, [pc, #612]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 030c 	and.w	r3, r3, #12
 800356c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800356e:	4b97      	ldr	r3, [pc, #604]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 80e9 	beq.w	8003758 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d006      	beq.n	800359a <HAL_RCC_OscConfig+0x4a>
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	2b0c      	cmp	r3, #12
 8003590:	f040 8083 	bne.w	800369a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d17f      	bne.n	800369a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800359a:	4b8c      	ldr	r3, [pc, #560]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <HAL_RCC_OscConfig+0x64>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f000 bc9a 	b.w	8003ee8 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035b8:	4b84      	ldr	r3, [pc, #528]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <HAL_RCC_OscConfig+0x7e>
 80035c4:	4b81      	ldr	r3, [pc, #516]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035cc:	e005      	b.n	80035da <HAL_RCC_OscConfig+0x8a>
 80035ce:	4b7f      	ldr	r3, [pc, #508]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80035d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035da:	4293      	cmp	r3, r2
 80035dc:	d224      	bcs.n	8003628 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fe9c 	bl	8004320 <RCC_SetFlashLatencyFromMSIRange>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	f000 bc7a 	b.w	8003ee8 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035f4:	4b75      	ldr	r3, [pc, #468]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a74      	ldr	r2, [pc, #464]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80035fa:	f043 0308 	orr.w	r3, r3, #8
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	4b72      	ldr	r3, [pc, #456]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	496f      	ldr	r1, [pc, #444]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 800360e:	4313      	orrs	r3, r2
 8003610:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003612:	4b6e      	ldr	r3, [pc, #440]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	496a      	ldr	r1, [pc, #424]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 8003622:	4313      	orrs	r3, r2
 8003624:	604b      	str	r3, [r1, #4]
 8003626:	e026      	b.n	8003676 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003628:	4b68      	ldr	r3, [pc, #416]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a67      	ldr	r2, [pc, #412]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 800362e:	f043 0308 	orr.w	r3, r3, #8
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	4b65      	ldr	r3, [pc, #404]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	4962      	ldr	r1, [pc, #392]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003646:	4b61      	ldr	r3, [pc, #388]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	495d      	ldr	r1, [pc, #372]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 8003656:	4313      	orrs	r3, r2
 8003658:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fe5b 	bl	8004320 <RCC_SetFlashLatencyFromMSIRange>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	f000 bc39 	b.w	8003ee8 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003676:	f000 fe17 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 800367a:	4603      	mov	r3, r0
 800367c:	4a54      	ldr	r2, [pc, #336]	; (80037d0 <HAL_RCC_OscConfig+0x280>)
 800367e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003680:	4b54      	ldr	r3, [pc, #336]	; (80037d4 <HAL_RCC_OscConfig+0x284>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7fd fff3 	bl	8001670 <HAL_InitTick>
 800368a:	4603      	mov	r3, r0
 800368c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d060      	beq.n	8003756 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	f000 bc27 	b.w	8003ee8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d039      	beq.n	8003716 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036a2:	4b4a      	ldr	r3, [pc, #296]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a49      	ldr	r2, [pc, #292]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036ae:	f7fe f82f 	bl	8001710 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036b4:	e00f      	b.n	80036d6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036b6:	f7fe f82b 	bl	8001710 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d908      	bls.n	80036d6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036c4:	4b41      	ldr	r3, [pc, #260]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	f000 bc09 	b.w	8003ee8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036d6:	4b3d      	ldr	r3, [pc, #244]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0e9      	beq.n	80036b6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036e2:	4b3a      	ldr	r3, [pc, #232]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a39      	ldr	r2, [pc, #228]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80036e8:	f043 0308 	orr.w	r3, r3, #8
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	4b37      	ldr	r3, [pc, #220]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	4934      	ldr	r1, [pc, #208]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003700:	4b32      	ldr	r3, [pc, #200]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	492f      	ldr	r1, [pc, #188]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]
 8003714:	e020      	b.n	8003758 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003716:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a2c      	ldr	r2, [pc, #176]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003722:	f7fd fff5 	bl	8001710 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003728:	e00e      	b.n	8003748 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800372a:	f7fd fff1 	bl	8001710 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d907      	bls.n	8003748 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003738:	4b24      	ldr	r3, [pc, #144]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e3cf      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003748:	4b20      	ldr	r3, [pc, #128]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1ea      	bne.n	800372a <HAL_RCC_OscConfig+0x1da>
 8003754:	e000      	b.n	8003758 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003756:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d07e      	beq.n	8003862 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	2b08      	cmp	r3, #8
 8003768:	d005      	beq.n	8003776 <HAL_RCC_OscConfig+0x226>
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	2b0c      	cmp	r3, #12
 800376e:	d10e      	bne.n	800378e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d10b      	bne.n	800378e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003776:	4b15      	ldr	r3, [pc, #84]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d06e      	beq.n	8003860 <HAL_RCC_OscConfig+0x310>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d16a      	bne.n	8003860 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e3ac      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003796:	d106      	bne.n	80037a6 <HAL_RCC_OscConfig+0x256>
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0b      	ldr	r2, [pc, #44]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 800379e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	e024      	b.n	80037f0 <HAL_RCC_OscConfig+0x2a0>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037ae:	d113      	bne.n	80037d8 <HAL_RCC_OscConfig+0x288>
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a05      	ldr	r2, [pc, #20]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80037b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a02      	ldr	r2, [pc, #8]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80037c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	e012      	b.n	80037f0 <HAL_RCC_OscConfig+0x2a0>
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
 80037d0:	20000000 	.word	0x20000000
 80037d4:	20000004 	.word	0x20000004
 80037d8:	4b8b      	ldr	r3, [pc, #556]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a8a      	ldr	r2, [pc, #552]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 80037de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	4b88      	ldr	r3, [pc, #544]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a87      	ldr	r2, [pc, #540]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 80037ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d019      	beq.n	800382c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fd ff8a 	bl	8001710 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037fe:	e00e      	b.n	800381e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003800:	f7fd ff86 	bl	8001710 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	; 0x64
 800380c:	d907      	bls.n	800381e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800380e:	4b7e      	ldr	r3, [pc, #504]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e364      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800381e:	4b7a      	ldr	r3, [pc, #488]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0ea      	beq.n	8003800 <HAL_RCC_OscConfig+0x2b0>
 800382a:	e01a      	b.n	8003862 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fd ff70 	bl	8001710 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003832:	e00e      	b.n	8003852 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003834:	f7fd ff6c 	bl	8001710 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	; 0x64
 8003840:	d907      	bls.n	8003852 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003842:	4b71      	ldr	r3, [pc, #452]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e34a      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003852:	4b6d      	ldr	r3, [pc, #436]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1ea      	bne.n	8003834 <HAL_RCC_OscConfig+0x2e4>
 800385e:	e000      	b.n	8003862 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d06c      	beq.n	8003948 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	2b04      	cmp	r3, #4
 8003872:	d005      	beq.n	8003880 <HAL_RCC_OscConfig+0x330>
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	2b0c      	cmp	r3, #12
 8003878:	d119      	bne.n	80038ae <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d116      	bne.n	80038ae <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003880:	4b61      	ldr	r3, [pc, #388]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_RCC_OscConfig+0x348>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e327      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003898:	4b5b      	ldr	r3, [pc, #364]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	061b      	lsls	r3, r3, #24
 80038a6:	4958      	ldr	r1, [pc, #352]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038ac:	e04c      	b.n	8003948 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d029      	beq.n	800390a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b6:	4b54      	ldr	r3, [pc, #336]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a53      	ldr	r2, [pc, #332]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 80038bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7fd ff25 	bl	8001710 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038c8:	e00e      	b.n	80038e8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ca:	f7fd ff21 	bl	8001710 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d907      	bls.n	80038e8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038d8:	4b4b      	ldr	r3, [pc, #300]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e2ff      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038e8:	4b47      	ldr	r3, [pc, #284]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ea      	beq.n	80038ca <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f4:	4b44      	ldr	r3, [pc, #272]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	061b      	lsls	r3, r3, #24
 8003902:	4941      	ldr	r1, [pc, #260]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 8003904:	4313      	orrs	r3, r2
 8003906:	604b      	str	r3, [r1, #4]
 8003908:	e01e      	b.n	8003948 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800390a:	4b3f      	ldr	r3, [pc, #252]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a3e      	ldr	r2, [pc, #248]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 8003910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003916:	f7fd fefb 	bl	8001710 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800391c:	e00e      	b.n	800393c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800391e:	f7fd fef7 	bl	8001710 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d907      	bls.n	800393c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800392c:	4b36      	ldr	r3, [pc, #216]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e2d5      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800393c:	4b32      	ldr	r3, [pc, #200]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1ea      	bne.n	800391e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d062      	beq.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d038      	beq.n	80039ce <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d108      	bne.n	8003976 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003964:	4b28      	ldr	r3, [pc, #160]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 8003966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396a:	4a27      	ldr	r2, [pc, #156]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 800396c:	f023 0310 	bic.w	r3, r3, #16
 8003970:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003974:	e007      	b.n	8003986 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003976:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 8003978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800397c:	4a22      	ldr	r2, [pc, #136]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 800397e:	f043 0310 	orr.w	r3, r3, #16
 8003982:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003986:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 8003988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398c:	4a1e      	ldr	r2, [pc, #120]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003996:	f7fd febb 	bl	8001710 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800399c:	e00f      	b.n	80039be <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800399e:	f7fd feb7 	bl	8001710 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b07      	cmp	r3, #7
 80039aa:	d908      	bls.n	80039be <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039ac:	4b16      	ldr	r3, [pc, #88]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 80039ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e294      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039be:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 80039c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0e8      	beq.n	800399e <HAL_RCC_OscConfig+0x44e>
 80039cc:	e025      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ce:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 80039d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d4:	4a0c      	ldr	r2, [pc, #48]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039de:	f7fd fe97 	bl	8001710 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e4:	e012      	b.n	8003a0c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e6:	f7fd fe93 	bl	8001710 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b07      	cmp	r3, #7
 80039f2:	d90b      	bls.n	8003a0c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039f4:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <HAL_RCC_OscConfig+0x4b8>)
 80039f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d004      	beq.n	8003a0c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e270      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a0c:	4ba8      	ldr	r3, [pc, #672]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e5      	bne.n	80039e6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 812d 	beq.w	8003c82 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a2c:	4ba0      	ldr	r3, [pc, #640]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10d      	bne.n	8003a54 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a38:	4b9d      	ldr	r3, [pc, #628]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	4a9c      	ldr	r2, [pc, #624]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a42:	6593      	str	r3, [r2, #88]	; 0x58
 8003a44:	4b9a      	ldr	r3, [pc, #616]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a50:	2301      	movs	r3, #1
 8003a52:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a54:	4b97      	ldr	r3, [pc, #604]	; (8003cb4 <HAL_RCC_OscConfig+0x764>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d11e      	bne.n	8003a9e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a60:	4b94      	ldr	r3, [pc, #592]	; (8003cb4 <HAL_RCC_OscConfig+0x764>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a93      	ldr	r2, [pc, #588]	; (8003cb4 <HAL_RCC_OscConfig+0x764>)
 8003a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6c:	f7fd fe50 	bl	8001710 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a72:	e00e      	b.n	8003a92 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a74:	f7fd fe4c 	bl	8001710 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d907      	bls.n	8003a92 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a82:	4b8c      	ldr	r3, [pc, #560]	; (8003cb4 <HAL_RCC_OscConfig+0x764>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e22a      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a92:	4b88      	ldr	r3, [pc, #544]	; (8003cb4 <HAL_RCC_OscConfig+0x764>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0ea      	beq.n	8003a74 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d01f      	beq.n	8003aea <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d010      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ab6:	4b7e      	ldr	r3, [pc, #504]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abc:	4a7c      	ldr	r2, [pc, #496]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003abe:	f043 0304 	orr.w	r3, r3, #4
 8003ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ac6:	4b7a      	ldr	r3, [pc, #488]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003acc:	4a78      	ldr	r2, [pc, #480]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad6:	e018      	b.n	8003b0a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ad8:	4b75      	ldr	r3, [pc, #468]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ade:	4a74      	ldr	r2, [pc, #464]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ae8:	e00f      	b.n	8003b0a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003aea:	4b71      	ldr	r3, [pc, #452]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af0:	4a6f      	ldr	r2, [pc, #444]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003af2:	f023 0301 	bic.w	r3, r3, #1
 8003af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003afa:	4b6d      	ldr	r3, [pc, #436]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b00:	4a6b      	ldr	r2, [pc, #428]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003b02:	f023 0304 	bic.w	r3, r3, #4
 8003b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d068      	beq.n	8003be4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b12:	f7fd fdfd 	bl	8001710 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b18:	e011      	b.n	8003b3e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1a:	f7fd fdf9 	bl	8001710 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d908      	bls.n	8003b3e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b2c:	4b60      	ldr	r3, [pc, #384]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e1d4      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b3e:	4b5c      	ldr	r3, [pc, #368]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0e6      	beq.n	8003b1a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d022      	beq.n	8003b9e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b58:	4b55      	ldr	r3, [pc, #340]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	4a54      	ldr	r2, [pc, #336]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003b68:	e011      	b.n	8003b8e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6a:	f7fd fdd1 	bl	8001710 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d908      	bls.n	8003b8e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003b7c:	4b4c      	ldr	r3, [pc, #304]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e1ac      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003b8e:	4b48      	ldr	r3, [pc, #288]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0e6      	beq.n	8003b6a <HAL_RCC_OscConfig+0x61a>
 8003b9c:	e068      	b.n	8003c70 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b9e:	4b44      	ldr	r3, [pc, #272]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba4:	4a42      	ldr	r2, [pc, #264]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003ba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003baa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003bae:	e011      	b.n	8003bd4 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb0:	f7fd fdae 	bl	8001710 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d908      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003bc2:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e189      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003bd4:	4b36      	ldr	r3, [pc, #216]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e6      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x660>
 8003be2:	e045      	b.n	8003c70 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be4:	f7fd fd94 	bl	8001710 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bea:	e011      	b.n	8003c10 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bec:	f7fd fd90 	bl	8001710 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d908      	bls.n	8003c10 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bfe:	4b2c      	ldr	r3, [pc, #176]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e16b      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c10:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e6      	bne.n	8003bec <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003c1e:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d021      	beq.n	8003c70 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003c2c:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	4a1f      	ldr	r2, [pc, #124]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c3c:	e011      	b.n	8003c62 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3e:	f7fd fd67 	bl	8001710 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d908      	bls.n	8003c62 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c50:	4b17      	ldr	r3, [pc, #92]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e142      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003c62:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e6      	bne.n	8003c3e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c70:	7ffb      	ldrb	r3, [r7, #31]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d105      	bne.n	8003c82 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c76:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7a:	4a0d      	ldr	r2, [pc, #52]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d04f      	beq.n	8003d2e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d028      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c96:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c9c:	4a04      	ldr	r2, [pc, #16]	; (8003cb0 <HAL_RCC_OscConfig+0x760>)
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca6:	f7fd fd33 	bl	8001710 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cac:	e014      	b.n	8003cd8 <HAL_RCC_OscConfig+0x788>
 8003cae:	bf00      	nop
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cb8:	f7fd fd2a 	bl	8001710 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d908      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cc6:	4b8a      	ldr	r3, [pc, #552]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e107      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cd8:	4b85      	ldr	r3, [pc, #532]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003cda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0e8      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x768>
 8003ce6:	e022      	b.n	8003d2e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ce8:	4b81      	ldr	r3, [pc, #516]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003cea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cee:	4a80      	ldr	r2, [pc, #512]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003cf0:	f023 0301 	bic.w	r3, r3, #1
 8003cf4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7fd fd0a 	bl	8001710 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cfe:	e00f      	b.n	8003d20 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d00:	f7fd fd06 	bl	8001710 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d908      	bls.n	8003d20 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d0e:	4b78      	ldr	r3, [pc, #480]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e0e3      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d20:	4b73      	ldr	r3, [pc, #460]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e8      	bne.n	8003d00 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80d7 	beq.w	8003ee6 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d38:	4b6d      	ldr	r3, [pc, #436]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b0c      	cmp	r3, #12
 8003d42:	f000 8091 	beq.w	8003e68 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d166      	bne.n	8003e1c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4e:	4b68      	ldr	r3, [pc, #416]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a67      	ldr	r2, [pc, #412]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003d54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5a:	f7fd fcd9 	bl	8001710 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d60:	e00e      	b.n	8003d80 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d62:	f7fd fcd5 	bl	8001710 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d907      	bls.n	8003d80 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d70:	4b5f      	ldr	r3, [pc, #380]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e0b3      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d80:	4b5b      	ldr	r3, [pc, #364]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1ea      	bne.n	8003d62 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d8c:	4b58      	ldr	r3, [pc, #352]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	4b58      	ldr	r3, [pc, #352]	; (8003ef4 <HAL_RCC_OscConfig+0x9a4>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d9c:	3a01      	subs	r2, #1
 8003d9e:	0112      	lsls	r2, r2, #4
 8003da0:	4311      	orrs	r1, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003da6:	0212      	lsls	r2, r2, #8
 8003da8:	4311      	orrs	r1, r2
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003dae:	0852      	lsrs	r2, r2, #1
 8003db0:	3a01      	subs	r2, #1
 8003db2:	0552      	lsls	r2, r2, #21
 8003db4:	4311      	orrs	r1, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003dba:	0852      	lsrs	r2, r2, #1
 8003dbc:	3a01      	subs	r2, #1
 8003dbe:	0652      	lsls	r2, r2, #25
 8003dc0:	4311      	orrs	r1, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003dc6:	06d2      	lsls	r2, r2, #27
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	4949      	ldr	r1, [pc, #292]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd0:	4b47      	ldr	r3, [pc, #284]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a46      	ldr	r2, [pc, #280]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dda:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ddc:	4b44      	ldr	r3, [pc, #272]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	4a43      	ldr	r2, [pc, #268]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003de6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7fd fc92 	bl	8001710 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dee:	e00e      	b.n	8003e0e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df0:	f7fd fc8e 	bl	8001710 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d907      	bls.n	8003e0e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfe:	4b3c      	ldr	r3, [pc, #240]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e06c      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e0e:	4b38      	ldr	r3, [pc, #224]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0ea      	beq.n	8003df0 <HAL_RCC_OscConfig+0x8a0>
 8003e1a:	e064      	b.n	8003ee6 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1c:	4b34      	ldr	r3, [pc, #208]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a33      	ldr	r2, [pc, #204]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fd fc72 	bl	8001710 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e2e:	e00e      	b.n	8003e4e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e30:	f7fd fc6e 	bl	8001710 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d907      	bls.n	8003e4e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e3e:	4b2c      	ldr	r3, [pc, #176]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e04c      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e4e:	4b28      	ldr	r3, [pc, #160]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1ea      	bne.n	8003e30 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e5a:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	4924      	ldr	r1, [pc, #144]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003e60:	4b25      	ldr	r3, [pc, #148]	; (8003ef8 <HAL_RCC_OscConfig+0x9a8>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	60cb      	str	r3, [r1, #12]
 8003e66:	e03e      	b.n	8003ee6 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e039      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003e74:	4b1e      	ldr	r3, [pc, #120]	; (8003ef0 <HAL_RCC_OscConfig+0x9a0>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f003 0203 	and.w	r2, r3, #3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d12c      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e92:	3b01      	subs	r3, #1
 8003e94:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d123      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d11b      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d113      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	085b      	lsrs	r3, r3, #1
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d109      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed8:	085b      	lsrs	r3, r3, #1
 8003eda:	3b01      	subs	r3, #1
 8003edc:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3720      	adds	r7, #32
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	019f800c 	.word	0x019f800c
 8003ef8:	feeefffc 	.word	0xfeeefffc

08003efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e11c      	b.n	800414e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f14:	4b90      	ldr	r3, [pc, #576]	; (8004158 <HAL_RCC_ClockConfig+0x25c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d910      	bls.n	8003f44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b8d      	ldr	r3, [pc, #564]	; (8004158 <HAL_RCC_ClockConfig+0x25c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 020f 	bic.w	r2, r3, #15
 8003f2a:	498b      	ldr	r1, [pc, #556]	; (8004158 <HAL_RCC_ClockConfig+0x25c>)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f32:	4b89      	ldr	r3, [pc, #548]	; (8004158 <HAL_RCC_ClockConfig+0x25c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d001      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e104      	b.n	800414e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d010      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	4b81      	ldr	r3, [pc, #516]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d908      	bls.n	8003f72 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f60:	4b7e      	ldr	r3, [pc, #504]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	497b      	ldr	r1, [pc, #492]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8085 	beq.w	800408a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d11f      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f88:	4b74      	ldr	r3, [pc, #464]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0da      	b.n	800414e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003f98:	f000 fa26 	bl	80043e8 <RCC_GetSysClockFreqFromPLLSource>
 8003f9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4a6f      	ldr	r2, [pc, #444]	; (8004160 <HAL_RCC_ClockConfig+0x264>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d947      	bls.n	8004036 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003fa6:	4b6d      	ldr	r3, [pc, #436]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d141      	bne.n	8004036 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fb2:	4b6a      	ldr	r3, [pc, #424]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fba:	4a68      	ldr	r2, [pc, #416]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8003fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003fc2:	2380      	movs	r3, #128	; 0x80
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	e036      	b.n	8004036 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d107      	bne.n	8003fe0 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fd0:	4b62      	ldr	r3, [pc, #392]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d115      	bne.n	8004008 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0b6      	b.n	800414e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d107      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fe8:	4b5c      	ldr	r3, [pc, #368]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d109      	bne.n	8004008 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0aa      	b.n	800414e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff8:	4b58      	ldr	r3, [pc, #352]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0a2      	b.n	800414e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004008:	f000 f8b0 	bl	800416c <HAL_RCC_GetSysClockFreq>
 800400c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4a53      	ldr	r2, [pc, #332]	; (8004160 <HAL_RCC_ClockConfig+0x264>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d90f      	bls.n	8004036 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004016:	4b51      	ldr	r3, [pc, #324]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004022:	4b4e      	ldr	r3, [pc, #312]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800402a:	4a4c      	ldr	r2, [pc, #304]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 800402c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004030:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004032:	2380      	movs	r3, #128	; 0x80
 8004034:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004036:	4b49      	ldr	r3, [pc, #292]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f023 0203 	bic.w	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4946      	ldr	r1, [pc, #280]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8004044:	4313      	orrs	r3, r2
 8004046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004048:	f7fd fb62 	bl	8001710 <HAL_GetTick>
 800404c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404e:	e013      	b.n	8004078 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004050:	f7fd fb5e 	bl	8001710 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	; 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d90a      	bls.n	8004078 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004062:	4b3e      	ldr	r3, [pc, #248]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 020c 	and.w	r2, r3, #12
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e06a      	b.n	800414e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004078:	4b38      	ldr	r3, [pc, #224]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 020c 	and.w	r2, r3, #12
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	429a      	cmp	r2, r3
 8004088:	d1e2      	bne.n	8004050 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b80      	cmp	r3, #128	; 0x80
 800408e:	d105      	bne.n	800409c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004090:	4b32      	ldr	r3, [pc, #200]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	4a31      	ldr	r2, [pc, #196]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8004096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800409a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d010      	beq.n	80040ca <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	4b2b      	ldr	r3, [pc, #172]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d208      	bcs.n	80040ca <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b8:	4b28      	ldr	r3, [pc, #160]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	4925      	ldr	r1, [pc, #148]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040ca:	4b23      	ldr	r3, [pc, #140]	; (8004158 <HAL_RCC_ClockConfig+0x25c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d210      	bcs.n	80040fa <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d8:	4b1f      	ldr	r3, [pc, #124]	; (8004158 <HAL_RCC_ClockConfig+0x25c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f023 020f 	bic.w	r2, r3, #15
 80040e0:	491d      	ldr	r1, [pc, #116]	; (8004158 <HAL_RCC_ClockConfig+0x25c>)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e8:	4b1b      	ldr	r3, [pc, #108]	; (8004158 <HAL_RCC_ClockConfig+0x25c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d001      	beq.n	80040fa <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e029      	b.n	800414e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d008      	beq.n	8004118 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004106:	4b15      	ldr	r3, [pc, #84]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	4912      	ldr	r1, [pc, #72]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8004114:	4313      	orrs	r3, r2
 8004116:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d009      	beq.n	8004138 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004124:	4b0d      	ldr	r3, [pc, #52]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	490a      	ldr	r1, [pc, #40]	; (800415c <HAL_RCC_ClockConfig+0x260>)
 8004134:	4313      	orrs	r3, r2
 8004136:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004138:	f000 f8b6 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 800413c:	4603      	mov	r3, r0
 800413e:	4a09      	ldr	r2, [pc, #36]	; (8004164 <HAL_RCC_ClockConfig+0x268>)
 8004140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004142:	4b09      	ldr	r3, [pc, #36]	; (8004168 <HAL_RCC_ClockConfig+0x26c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f7fd fa92 	bl	8001670 <HAL_InitTick>
 800414c:	4603      	mov	r3, r0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40022000 	.word	0x40022000
 800415c:	40021000 	.word	0x40021000
 8004160:	04c4b400 	.word	0x04c4b400
 8004164:	20000000 	.word	0x20000000
 8004168:	20000004 	.word	0x20000004

0800416c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800416c:	b480      	push	{r7}
 800416e:	b089      	sub	sp, #36	; 0x24
 8004170:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800417a:	4b47      	ldr	r3, [pc, #284]	; (8004298 <HAL_RCC_GetSysClockFreq+0x12c>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004184:	4b44      	ldr	r3, [pc, #272]	; (8004298 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_GetSysClockFreq+0x34>
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	2b0c      	cmp	r3, #12
 8004198:	d121      	bne.n	80041de <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d11e      	bne.n	80041de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041a0:	4b3d      	ldr	r3, [pc, #244]	; (8004298 <HAL_RCC_GetSysClockFreq+0x12c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d107      	bne.n	80041bc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041ac:	4b3a      	ldr	r3, [pc, #232]	; (8004298 <HAL_RCC_GetSysClockFreq+0x12c>)
 80041ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b2:	0a1b      	lsrs	r3, r3, #8
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	e005      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041bc:	4b36      	ldr	r3, [pc, #216]	; (8004298 <HAL_RCC_GetSysClockFreq+0x12c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	091b      	lsrs	r3, r3, #4
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80041c8:	4a34      	ldr	r2, [pc, #208]	; (800429c <HAL_RCC_GetSysClockFreq+0x130>)
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10d      	bne.n	80041f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80041dc:	e00a      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d102      	bne.n	80041ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041e4:	4b2e      	ldr	r3, [pc, #184]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x134>)
 80041e6:	61bb      	str	r3, [r7, #24]
 80041e8:	e004      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d101      	bne.n	80041f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041f0:	4b2c      	ldr	r3, [pc, #176]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x138>)
 80041f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	2b0c      	cmp	r3, #12
 80041f8:	d146      	bne.n	8004288 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80041fa:	4b27      	ldr	r3, [pc, #156]	; (8004298 <HAL_RCC_GetSysClockFreq+0x12c>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004204:	4b24      	ldr	r3, [pc, #144]	; (8004298 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	3301      	adds	r3, #1
 8004210:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d003      	beq.n	8004220 <HAL_RCC_GetSysClockFreq+0xb4>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b03      	cmp	r3, #3
 800421c:	d00d      	beq.n	800423a <HAL_RCC_GetSysClockFreq+0xce>
 800421e:	e019      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004220:	4a1f      	ldr	r2, [pc, #124]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x134>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	4a1b      	ldr	r2, [pc, #108]	; (8004298 <HAL_RCC_GetSysClockFreq+0x12c>)
 800422a:	68d2      	ldr	r2, [r2, #12]
 800422c:	0a12      	lsrs	r2, r2, #8
 800422e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004232:	fb02 f303 	mul.w	r3, r2, r3
 8004236:	617b      	str	r3, [r7, #20]
        break;
 8004238:	e019      	b.n	800426e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800423a:	4a1a      	ldr	r2, [pc, #104]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004242:	4a15      	ldr	r2, [pc, #84]	; (8004298 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004244:	68d2      	ldr	r2, [r2, #12]
 8004246:	0a12      	lsrs	r2, r2, #8
 8004248:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800424c:	fb02 f303 	mul.w	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]
        break;
 8004252:	e00c      	b.n	800426e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	fbb2 f3f3 	udiv	r3, r2, r3
 800425c:	4a0e      	ldr	r2, [pc, #56]	; (8004298 <HAL_RCC_GetSysClockFreq+0x12c>)
 800425e:	68d2      	ldr	r2, [r2, #12]
 8004260:	0a12      	lsrs	r2, r2, #8
 8004262:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	617b      	str	r3, [r7, #20]
        break;
 800426c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800426e:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	0e5b      	lsrs	r3, r3, #25
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	3301      	adds	r3, #1
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	fbb2 f3f3 	udiv	r3, r2, r3
 8004286:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004288:	69bb      	ldr	r3, [r7, #24]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3724      	adds	r7, #36	; 0x24
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000
 800429c:	08007b18 	.word	0x08007b18
 80042a0:	00f42400 	.word	0x00f42400
 80042a4:	007a1200 	.word	0x007a1200

080042a8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80042ac:	f7ff ff5e 	bl	800416c <HAL_RCC_GetSysClockFreq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <HAL_RCC_GetHCLKFreq+0x20>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	091b      	lsrs	r3, r3, #4
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	4903      	ldr	r1, [pc, #12]	; (80042cc <HAL_RCC_GetHCLKFreq+0x24>)
 80042be:	5ccb      	ldrb	r3, [r1, r3]
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40021000 	.word	0x40021000
 80042cc:	08007b00 	.word	0x08007b00

080042d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042d4:	f7ff ffe8 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 80042d8:	4602      	mov	r2, r0
 80042da:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	4903      	ldr	r1, [pc, #12]	; (80042f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042e6:	5ccb      	ldrb	r3, [r1, r3]
 80042e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40021000 	.word	0x40021000
 80042f4:	08007b10 	.word	0x08007b10

080042f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042fc:	f7ff ffd4 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 8004300:	4602      	mov	r2, r0
 8004302:	4b05      	ldr	r3, [pc, #20]	; (8004318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	0adb      	lsrs	r3, r3, #11
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	4903      	ldr	r1, [pc, #12]	; (800431c <HAL_RCC_GetPCLK2Freq+0x24>)
 800430e:	5ccb      	ldrb	r3, [r1, r3]
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004314:	4618      	mov	r0, r3
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40021000 	.word	0x40021000
 800431c:	08007b10 	.word	0x08007b10

08004320 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800432c:	4b2c      	ldr	r3, [pc, #176]	; (80043e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800432e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004338:	f7ff f86c 	bl	8003414 <HAL_PWREx_GetVoltageRange>
 800433c:	6138      	str	r0, [r7, #16]
 800433e:	e014      	b.n	800436a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004340:	4b27      	ldr	r3, [pc, #156]	; (80043e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004344:	4a26      	ldr	r2, [pc, #152]	; (80043e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434a:	6593      	str	r3, [r2, #88]	; 0x58
 800434c:	4b24      	ldr	r3, [pc, #144]	; (80043e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800434e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004358:	f7ff f85c 	bl	8003414 <HAL_PWREx_GetVoltageRange>
 800435c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800435e:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	4a1f      	ldr	r2, [pc, #124]	; (80043e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004368:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004376:	d10b      	bne.n	8004390 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b80      	cmp	r3, #128	; 0x80
 800437c:	d919      	bls.n	80043b2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2ba0      	cmp	r3, #160	; 0xa0
 8004382:	d902      	bls.n	800438a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004384:	2302      	movs	r3, #2
 8004386:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004388:	e013      	b.n	80043b2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800438a:	2301      	movs	r3, #1
 800438c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800438e:	e010      	b.n	80043b2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b80      	cmp	r3, #128	; 0x80
 8004394:	d902      	bls.n	800439c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004396:	2303      	movs	r3, #3
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	e00a      	b.n	80043b2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b80      	cmp	r3, #128	; 0x80
 80043a0:	d102      	bne.n	80043a8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043a2:	2302      	movs	r3, #2
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	e004      	b.n	80043b2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b70      	cmp	r3, #112	; 0x70
 80043ac:	d101      	bne.n	80043b2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043ae:	2301      	movs	r3, #1
 80043b0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043b2:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 020f 	bic.w	r2, r3, #15
 80043ba:	490a      	ldr	r1, [pc, #40]	; (80043e4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80043c2:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40022000 	.word	0x40022000

080043e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043ee:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043f8:	4b2e      	ldr	r3, [pc, #184]	; (80044b4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	3301      	adds	r3, #1
 8004404:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b03      	cmp	r3, #3
 800440a:	d015      	beq.n	8004438 <RCC_GetSysClockFreqFromPLLSource+0x50>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b03      	cmp	r3, #3
 8004410:	d839      	bhi.n	8004486 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d01c      	beq.n	8004452 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d133      	bne.n	8004486 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800441e:	4a26      	ldr	r2, [pc, #152]	; (80044b8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	fbb2 f3f3 	udiv	r3, r2, r3
 8004426:	4a23      	ldr	r2, [pc, #140]	; (80044b4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004428:	68d2      	ldr	r2, [r2, #12]
 800442a:	0a12      	lsrs	r2, r2, #8
 800442c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004430:	fb02 f303 	mul.w	r3, r2, r3
 8004434:	613b      	str	r3, [r7, #16]
      break;
 8004436:	e029      	b.n	800448c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004438:	4a20      	ldr	r2, [pc, #128]	; (80044bc <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	4a1c      	ldr	r2, [pc, #112]	; (80044b4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004442:	68d2      	ldr	r2, [r2, #12]
 8004444:	0a12      	lsrs	r2, r2, #8
 8004446:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800444a:	fb02 f303 	mul.w	r3, r2, r3
 800444e:	613b      	str	r3, [r7, #16]
      break;
 8004450:	e01c      	b.n	800448c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004452:	4b18      	ldr	r3, [pc, #96]	; (80044b4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d107      	bne.n	800446e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800445e:	4b15      	ldr	r3, [pc, #84]	; (80044b4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004464:	0a1b      	lsrs	r3, r3, #8
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	e005      	b.n	800447a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800446e:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	091b      	lsrs	r3, r3, #4
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800447a:	4a11      	ldr	r2, [pc, #68]	; (80044c0 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004482:	613b      	str	r3, [r7, #16]
        break;
 8004484:	e002      	b.n	800448c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8004486:	2300      	movs	r3, #0
 8004488:	613b      	str	r3, [r7, #16]
      break;
 800448a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800448c:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	0e5b      	lsrs	r3, r3, #25
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	3301      	adds	r3, #1
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80044a6:	683b      	ldr	r3, [r7, #0]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	371c      	adds	r7, #28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	40021000 	.word	0x40021000
 80044b8:	00f42400 	.word	0x00f42400
 80044bc:	007a1200 	.word	0x007a1200
 80044c0:	08007b18 	.word	0x08007b18

080044c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044cc:	2300      	movs	r3, #0
 80044ce:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044d0:	2300      	movs	r3, #0
 80044d2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d040      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044e4:	2b80      	cmp	r3, #128	; 0x80
 80044e6:	d02a      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80044e8:	2b80      	cmp	r3, #128	; 0x80
 80044ea:	d825      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80044ec:	2b60      	cmp	r3, #96	; 0x60
 80044ee:	d026      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80044f0:	2b60      	cmp	r3, #96	; 0x60
 80044f2:	d821      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80044f4:	2b40      	cmp	r3, #64	; 0x40
 80044f6:	d006      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80044f8:	2b40      	cmp	r3, #64	; 0x40
 80044fa:	d81d      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d009      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004500:	2b20      	cmp	r3, #32
 8004502:	d010      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004504:	e018      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004506:	4b8f      	ldr	r3, [pc, #572]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	4a8e      	ldr	r2, [pc, #568]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800450c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004510:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004512:	e015      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3304      	adds	r3, #4
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fb56 	bl	8004bcc <RCCEx_PLLSAI1_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004524:	e00c      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3320      	adds	r3, #32
 800452a:	2100      	movs	r1, #0
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fc33 	bl	8004d98 <RCCEx_PLLSAI2_Config>
 8004532:	4603      	mov	r3, r0
 8004534:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004536:	e003      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	77fb      	strb	r3, [r7, #31]
        break;
 800453c:	e000      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800453e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004540:	7ffb      	ldrb	r3, [r7, #31]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10b      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004546:	4b7f      	ldr	r3, [pc, #508]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004548:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800454c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004554:	497b      	ldr	r1, [pc, #492]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800455c:	e001      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455e:	7ffb      	ldrb	r3, [r7, #31]
 8004560:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d047      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004576:	d030      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457c:	d82a      	bhi.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800457e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004582:	d02a      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004588:	d824      	bhi.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800458a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800458e:	d008      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004594:	d81e      	bhi.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800459a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800459e:	d010      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80045a0:	e018      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045a2:	4b68      	ldr	r3, [pc, #416]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	4a67      	ldr	r2, [pc, #412]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ac:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80045ae:	e015      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	2100      	movs	r1, #0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fb08 	bl	8004bcc <RCCEx_PLLSAI1_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80045c0:	e00c      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3320      	adds	r3, #32
 80045c6:	2100      	movs	r1, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fbe5 	bl	8004d98 <RCCEx_PLLSAI2_Config>
 80045ce:	4603      	mov	r3, r0
 80045d0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80045d2:	e003      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	77fb      	strb	r3, [r7, #31]
        break;
 80045d8:	e000      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80045da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045dc:	7ffb      	ldrb	r3, [r7, #31]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10b      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045e2:	4b58      	ldr	r3, [pc, #352]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f0:	4954      	ldr	r1, [pc, #336]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80045f8:	e001      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fa:	7ffb      	ldrb	r3, [r7, #31]
 80045fc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80ab 	beq.w	8004762 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460c:	2300      	movs	r3, #0
 800460e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004610:	4b4c      	ldr	r3, [pc, #304]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10d      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800461c:	4b49      	ldr	r3, [pc, #292]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800461e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004620:	4a48      	ldr	r2, [pc, #288]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004626:	6593      	str	r3, [r2, #88]	; 0x58
 8004628:	4b46      	ldr	r3, [pc, #280]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800462a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004634:	2301      	movs	r3, #1
 8004636:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004638:	4b43      	ldr	r3, [pc, #268]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a42      	ldr	r2, [pc, #264]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800463e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004642:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004644:	f7fd f864 	bl	8001710 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800464a:	e00f      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464c:	f7fd f860 	bl	8001710 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d908      	bls.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800465a:	4b3b      	ldr	r3, [pc, #236]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800466a:	e006      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800466c:	4b36      	ldr	r3, [pc, #216]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0e9      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004678:	e000      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800467a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 800467c:	7ffb      	ldrb	r3, [r7, #31]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d164      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004682:	4b30      	ldr	r3, [pc, #192]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01f      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	429a      	cmp	r2, r3
 800469e:	d019      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046a0:	4b28      	ldr	r3, [pc, #160]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046aa:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046ac:	4b25      	ldr	r3, [pc, #148]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	4a24      	ldr	r2, [pc, #144]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046bc:	4b21      	ldr	r3, [pc, #132]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c2:	4a20      	ldr	r2, [pc, #128]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046cc:	4a1d      	ldr	r2, [pc, #116]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d01f      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fd f817 	bl	8001710 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e4:	e012      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e6:	f7fd f813 	bl	8001710 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d909      	bls.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f8:	4b12      	ldr	r3, [pc, #72]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10a      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800470a:	e007      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800470c:	4b0d      	ldr	r3, [pc, #52]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0e5      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800471a:	e000      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 800471c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800471e:	7ffb      	ldrb	r3, [r7, #31]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10c      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004724:	4b07      	ldr	r3, [pc, #28]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004734:	4903      	ldr	r1, [pc, #12]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800473c:	e008      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800473e:	7ffb      	ldrb	r3, [r7, #31]
 8004740:	77bb      	strb	r3, [r7, #30]
 8004742:	e005      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8004744:	40021000 	.word	0x40021000
 8004748:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474c:	7ffb      	ldrb	r3, [r7, #31]
 800474e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004750:	7dfb      	ldrb	r3, [r7, #23]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d105      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004756:	4b9c      	ldr	r3, [pc, #624]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475a:	4a9b      	ldr	r2, [pc, #620]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800475c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004760:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800476e:	4b96      	ldr	r3, [pc, #600]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004774:	f023 0203 	bic.w	r2, r3, #3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477c:	4992      	ldr	r1, [pc, #584]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004790:	4b8d      	ldr	r3, [pc, #564]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004796:	f023 020c 	bic.w	r2, r3, #12
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	498a      	ldr	r1, [pc, #552]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047b2:	4b85      	ldr	r3, [pc, #532]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c0:	4981      	ldr	r1, [pc, #516]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0308 	and.w	r3, r3, #8
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047d4:	4b7c      	ldr	r3, [pc, #496]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	4979      	ldr	r1, [pc, #484]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047f6:	4b74      	ldr	r3, [pc, #464]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004804:	4970      	ldr	r1, [pc, #448]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004818:	4b6b      	ldr	r3, [pc, #428]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004826:	4968      	ldr	r1, [pc, #416]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800483a:	4b63      	ldr	r3, [pc, #396]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004848:	495f      	ldr	r1, [pc, #380]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800485c:	4b5a      	ldr	r3, [pc, #360]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800486a:	4957      	ldr	r1, [pc, #348]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800487e:	4b52      	ldr	r3, [pc, #328]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004884:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800488c:	494e      	ldr	r1, [pc, #312]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d031      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048a8:	d00e      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80048aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048ae:	d814      	bhi.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x416>
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d015      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80048b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048b8:	d10f      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ba:	4b43      	ldr	r3, [pc, #268]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	4a42      	ldr	r2, [pc, #264]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048c4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80048c6:	e00c      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3304      	adds	r3, #4
 80048cc:	2100      	movs	r1, #0
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 f97c 	bl	8004bcc <RCCEx_PLLSAI1_Config>
 80048d4:	4603      	mov	r3, r0
 80048d6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80048d8:	e003      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	77fb      	strb	r3, [r7, #31]
        break;
 80048de:	e000      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80048e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048e2:	7ffb      	ldrb	r3, [r7, #31]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10b      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048e8:	4b37      	ldr	r3, [pc, #220]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048f6:	4934      	ldr	r1, [pc, #208]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048fe:	e001      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004900:	7ffb      	ldrb	r3, [r7, #31]
 8004902:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004910:	4b2d      	ldr	r3, [pc, #180]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491e:	492a      	ldr	r1, [pc, #168]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004932:	4b25      	ldr	r3, [pc, #148]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004940:	4921      	ldr	r1, [pc, #132]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004954:	4b1c      	ldr	r3, [pc, #112]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004962:	4919      	ldr	r1, [pc, #100]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004976:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004978:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800497c:	f023 0203 	bic.w	r2, r3, #3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	4910      	ldr	r1, [pc, #64]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d02b      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a6:	4908      	ldr	r1, [pc, #32]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b6:	d109      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b8:	4b03      	ldr	r3, [pc, #12]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4a02      	ldr	r2, [pc, #8]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80049be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049c2:	60d3      	str	r3, [r2, #12]
 80049c4:	e014      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80049c6:	bf00      	nop
 80049c8:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049d4:	d10c      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3304      	adds	r3, #4
 80049da:	2101      	movs	r1, #1
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 f8f5 	bl	8004bcc <RCCEx_PLLSAI1_Config>
 80049e2:	4603      	mov	r3, r0
 80049e4:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80049e6:	7ffb      	ldrb	r3, [r7, #31]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80049ec:	7ffb      	ldrb	r3, [r7, #31]
 80049ee:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d04a      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a04:	d108      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004a06:	4b70      	ldr	r3, [pc, #448]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a0c:	4a6e      	ldr	r2, [pc, #440]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a12:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004a16:	e012      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004a18:	4b6b      	ldr	r3, [pc, #428]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a26:	4968      	ldr	r1, [pc, #416]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a2e:	4b66      	ldr	r3, [pc, #408]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a34:	4a64      	ldr	r2, [pc, #400]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a3a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a46:	d10d      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f8bc 	bl	8004bcc <RCCEx_PLLSAI1_Config>
 8004a54:	4603      	mov	r3, r0
 8004a56:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004a58:	7ffb      	ldrb	r3, [r7, #31]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d019      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8004a5e:	7ffb      	ldrb	r3, [r7, #31]
 8004a60:	77bb      	strb	r3, [r7, #30]
 8004a62:	e016      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a6c:	d106      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a6e:	4b56      	ldr	r3, [pc, #344]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	4a55      	ldr	r2, [pc, #340]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a78:	60d3      	str	r3, [r2, #12]
 8004a7a:	e00a      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a84:	d105      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a86:	4b50      	ldr	r3, [pc, #320]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	4a4f      	ldr	r2, [pc, #316]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a90:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d028      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a9e:	4b4a      	ldr	r3, [pc, #296]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aac:	4946      	ldr	r1, [pc, #280]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004abc:	d106      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004abe:	4b42      	ldr	r3, [pc, #264]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	4a41      	ldr	r2, [pc, #260]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ac8:	60d3      	str	r3, [r2, #12]
 8004aca:	e011      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ad0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ad4:	d10c      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	2101      	movs	r1, #1
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 f875 	bl	8004bcc <RCCEx_PLLSAI1_Config>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004ae6:	7ffb      	ldrb	r3, [r7, #31]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004aec:	7ffb      	ldrb	r3, [r7, #31]
 8004aee:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01e      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004afc:	4b32      	ldr	r3, [pc, #200]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b0c:	492e      	ldr	r1, [pc, #184]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b1e:	d10c      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	2102      	movs	r1, #2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f850 	bl	8004bcc <RCCEx_PLLSAI1_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004b30:	7ffb      	ldrb	r3, [r7, #31]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8004b36:	7ffb      	ldrb	r3, [r7, #31]
 8004b38:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00b      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b46:	4b20      	ldr	r3, [pc, #128]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b4c:	f023 0204 	bic.w	r2, r3, #4
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b56:	491c      	ldr	r1, [pc, #112]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00b      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b6a:	4b17      	ldr	r3, [pc, #92]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b70:	f023 0218 	bic.w	r2, r3, #24
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7a:	4913      	ldr	r1, [pc, #76]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d017      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b8e:	4b0e      	ldr	r3, [pc, #56]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004b90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b9e:	490a      	ldr	r1, [pc, #40]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bb0:	d105      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	4a04      	ldr	r2, [pc, #16]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004bb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bbc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004bbe:	7fbb      	ldrb	r3, [r7, #30]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3720      	adds	r7, #32
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40021000 	.word	0x40021000

08004bcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d018      	beq.n	8004c14 <RCCEx_PLLSAI1_Config+0x48>
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d81f      	bhi.n	8004c26 <RCCEx_PLLSAI1_Config+0x5a>
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d002      	beq.n	8004bf0 <RCCEx_PLLSAI1_Config+0x24>
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d009      	beq.n	8004c02 <RCCEx_PLLSAI1_Config+0x36>
 8004bee:	e01a      	b.n	8004c26 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bf0:	4b65      	ldr	r3, [pc, #404]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d117      	bne.n	8004c2c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c00:	e014      	b.n	8004c2c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c02:	4b61      	ldr	r3, [pc, #388]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d110      	bne.n	8004c30 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c12:	e00d      	b.n	8004c30 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004c14:	4b5c      	ldr	r3, [pc, #368]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d109      	bne.n	8004c34 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c24:	e006      	b.n	8004c34 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
      break;
 8004c2a:	e004      	b.n	8004c36 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004c2c:	bf00      	nop
 8004c2e:	e002      	b.n	8004c36 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004c30:	bf00      	nop
 8004c32:	e000      	b.n	8004c36 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004c34:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f040 809f 	bne.w	8004d7c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c3e:	4b52      	ldr	r3, [pc, #328]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a51      	ldr	r2, [pc, #324]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c4a:	f7fc fd61 	bl	8001710 <HAL_GetTick>
 8004c4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c50:	e00f      	b.n	8004c72 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c52:	f7fc fd5d 	bl	8001710 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d908      	bls.n	8004c72 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c60:	4b49      	ldr	r3, [pc, #292]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d009      	beq.n	8004c80 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c70:	e006      	b.n	8004c80 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c72:	4b45      	ldr	r3, [pc, #276]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1e9      	bne.n	8004c52 <RCCEx_PLLSAI1_Config+0x86>
 8004c7e:	e000      	b.n	8004c82 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004c80:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d179      	bne.n	8004d7c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d116      	bne.n	8004cbc <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c8e:	4b3e      	ldr	r3, [pc, #248]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	4b3e      	ldr	r3, [pc, #248]	; (8004d8c <RCCEx_PLLSAI1_Config+0x1c0>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6892      	ldr	r2, [r2, #8]
 8004c9a:	0211      	lsls	r1, r2, #8
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	68d2      	ldr	r2, [r2, #12]
 8004ca0:	06d2      	lsls	r2, r2, #27
 8004ca2:	4311      	orrs	r1, r2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6852      	ldr	r2, [r2, #4]
 8004ca8:	3a01      	subs	r2, #1
 8004caa:	0112      	lsls	r2, r2, #4
 8004cac:	4311      	orrs	r1, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6812      	ldr	r2, [r2, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	4934      	ldr	r1, [pc, #208]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	610b      	str	r3, [r1, #16]
 8004cba:	e033      	b.n	8004d24 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d118      	bne.n	8004cf4 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cc2:	4b31      	ldr	r3, [pc, #196]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004cc4:	691a      	ldr	r2, [r3, #16]
 8004cc6:	4b32      	ldr	r3, [pc, #200]	; (8004d90 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6892      	ldr	r2, [r2, #8]
 8004cce:	0211      	lsls	r1, r2, #8
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6912      	ldr	r2, [r2, #16]
 8004cd4:	0852      	lsrs	r2, r2, #1
 8004cd6:	3a01      	subs	r2, #1
 8004cd8:	0552      	lsls	r2, r2, #21
 8004cda:	4311      	orrs	r1, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6852      	ldr	r2, [r2, #4]
 8004ce0:	3a01      	subs	r2, #1
 8004ce2:	0112      	lsls	r2, r2, #4
 8004ce4:	4311      	orrs	r1, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6812      	ldr	r2, [r2, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	4926      	ldr	r1, [pc, #152]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	610b      	str	r3, [r1, #16]
 8004cf2:	e017      	b.n	8004d24 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf4:	4b24      	ldr	r3, [pc, #144]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	4b26      	ldr	r3, [pc, #152]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1c8>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6892      	ldr	r2, [r2, #8]
 8004d00:	0211      	lsls	r1, r2, #8
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6952      	ldr	r2, [r2, #20]
 8004d06:	0852      	lsrs	r2, r2, #1
 8004d08:	3a01      	subs	r2, #1
 8004d0a:	0652      	lsls	r2, r2, #25
 8004d0c:	4311      	orrs	r1, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6852      	ldr	r2, [r2, #4]
 8004d12:	3a01      	subs	r2, #1
 8004d14:	0112      	lsls	r2, r2, #4
 8004d16:	4311      	orrs	r1, r2
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6812      	ldr	r2, [r2, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	491a      	ldr	r1, [pc, #104]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d24:	4b18      	ldr	r3, [pc, #96]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a17      	ldr	r2, [pc, #92]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d30:	f7fc fcee 	bl	8001710 <HAL_GetTick>
 8004d34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d36:	e00f      	b.n	8004d58 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d38:	f7fc fcea 	bl	8001710 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d908      	bls.n	8004d58 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d46:	4b10      	ldr	r3, [pc, #64]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004d56:	e006      	b.n	8004d66 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d58:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0e9      	beq.n	8004d38 <RCCEx_PLLSAI1_Config+0x16c>
 8004d64:	e000      	b.n	8004d68 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004d66:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004d6e:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	4904      	ldr	r1, [pc, #16]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	07ff800c 	.word	0x07ff800c
 8004d90:	ff9f800c 	.word	0xff9f800c
 8004d94:	f9ff800c 	.word	0xf9ff800c

08004d98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d018      	beq.n	8004de0 <RCCEx_PLLSAI2_Config+0x48>
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d81f      	bhi.n	8004df2 <RCCEx_PLLSAI2_Config+0x5a>
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d002      	beq.n	8004dbc <RCCEx_PLLSAI2_Config+0x24>
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d009      	beq.n	8004dce <RCCEx_PLLSAI2_Config+0x36>
 8004dba:	e01a      	b.n	8004df2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dbc:	4b4a      	ldr	r3, [pc, #296]	; (8004ee8 <RCCEx_PLLSAI2_Config+0x150>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d117      	bne.n	8004df8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dcc:	e014      	b.n	8004df8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dce:	4b46      	ldr	r3, [pc, #280]	; (8004ee8 <RCCEx_PLLSAI2_Config+0x150>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d110      	bne.n	8004dfc <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dde:	e00d      	b.n	8004dfc <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004de0:	4b41      	ldr	r3, [pc, #260]	; (8004ee8 <RCCEx_PLLSAI2_Config+0x150>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d109      	bne.n	8004e00 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004df0:	e006      	b.n	8004e00 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	73fb      	strb	r3, [r7, #15]
      break;
 8004df6:	e004      	b.n	8004e02 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004df8:	bf00      	nop
 8004dfa:	e002      	b.n	8004e02 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004dfc:	bf00      	nop
 8004dfe:	e000      	b.n	8004e02 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004e00:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d169      	bne.n	8004edc <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e08:	4b37      	ldr	r3, [pc, #220]	; (8004ee8 <RCCEx_PLLSAI2_Config+0x150>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a36      	ldr	r2, [pc, #216]	; (8004ee8 <RCCEx_PLLSAI2_Config+0x150>)
 8004e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e14:	f7fc fc7c 	bl	8001710 <HAL_GetTick>
 8004e18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e1a:	e00f      	b.n	8004e3c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e1c:	f7fc fc78 	bl	8001710 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d908      	bls.n	8004e3c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e2a:	4b2f      	ldr	r3, [pc, #188]	; (8004ee8 <RCCEx_PLLSAI2_Config+0x150>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d009      	beq.n	8004e4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e3a:	e006      	b.n	8004e4a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ee8 <RCCEx_PLLSAI2_Config+0x150>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e9      	bne.n	8004e1c <RCCEx_PLLSAI2_Config+0x84>
 8004e48:	e000      	b.n	8004e4c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8004e4a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d144      	bne.n	8004edc <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d115      	bne.n	8004e84 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e58:	4b23      	ldr	r3, [pc, #140]	; (8004ee8 <RCCEx_PLLSAI2_Config+0x150>)
 8004e5a:	695a      	ldr	r2, [r3, #20]
 8004e5c:	4b23      	ldr	r3, [pc, #140]	; (8004eec <RCCEx_PLLSAI2_Config+0x154>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6892      	ldr	r2, [r2, #8]
 8004e64:	0211      	lsls	r1, r2, #8
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	68d2      	ldr	r2, [r2, #12]
 8004e6a:	06d2      	lsls	r2, r2, #27
 8004e6c:	4311      	orrs	r1, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6852      	ldr	r2, [r2, #4]
 8004e72:	3a01      	subs	r2, #1
 8004e74:	0112      	lsls	r2, r2, #4
 8004e76:	4311      	orrs	r1, r2
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	491a      	ldr	r1, [pc, #104]	; (8004ee8 <RCCEx_PLLSAI2_Config+0x150>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e84:	4b18      	ldr	r3, [pc, #96]	; (8004ee8 <RCCEx_PLLSAI2_Config+0x150>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a17      	ldr	r2, [pc, #92]	; (8004ee8 <RCCEx_PLLSAI2_Config+0x150>)
 8004e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e90:	f7fc fc3e 	bl	8001710 <HAL_GetTick>
 8004e94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e96:	e00f      	b.n	8004eb8 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e98:	f7fc fc3a 	bl	8001710 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d908      	bls.n	8004eb8 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ea6:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <RCCEx_PLLSAI2_Config+0x150>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d109      	bne.n	8004ec6 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004eb6:	e006      	b.n	8004ec6 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <RCCEx_PLLSAI2_Config+0x150>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0e9      	beq.n	8004e98 <RCCEx_PLLSAI2_Config+0x100>
 8004ec4:	e000      	b.n	8004ec8 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004ec6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d106      	bne.n	8004edc <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004ece:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <RCCEx_PLLSAI2_Config+0x150>)
 8004ed0:	695a      	ldr	r2, [r3, #20]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	4904      	ldr	r1, [pc, #16]	; (8004ee8 <RCCEx_PLLSAI2_Config+0x150>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	07ff800c 	.word	0x07ff800c

08004ef0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d066      	beq.n	8004fd0 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fc f916 	bl	8001148 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b10      	cmp	r3, #16
 8004f30:	d045      	beq.n	8004fbe <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f32:	4b2a      	ldr	r3, [pc, #168]	; (8004fdc <HAL_RTC_Init+0xec>)
 8004f34:	22ca      	movs	r2, #202	; 0xca
 8004f36:	625a      	str	r2, [r3, #36]	; 0x24
 8004f38:	4b28      	ldr	r3, [pc, #160]	; (8004fdc <HAL_RTC_Init+0xec>)
 8004f3a:	2253      	movs	r2, #83	; 0x53
 8004f3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f872 	bl	8005028 <RTC_EnterInitMode>
 8004f44:	4603      	mov	r3, r0
 8004f46:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d121      	bne.n	8004f92 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004f4e:	4b23      	ldr	r3, [pc, #140]	; (8004fdc <HAL_RTC_Init+0xec>)
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	4a22      	ldr	r2, [pc, #136]	; (8004fdc <HAL_RTC_Init+0xec>)
 8004f54:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f5c:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004f5e:	4b1f      	ldr	r3, [pc, #124]	; (8004fdc <HAL_RTC_Init+0xec>)
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6859      	ldr	r1, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	4319      	orrs	r1, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	430b      	orrs	r3, r1
 8004f72:	491a      	ldr	r1, [pc, #104]	; (8004fdc <HAL_RTC_Init+0xec>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	041b      	lsls	r3, r3, #16
 8004f82:	4916      	ldr	r1, [pc, #88]	; (8004fdc <HAL_RTC_Init+0xec>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f881 	bl	8005090 <RTC_ExitInitMode>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10e      	bne.n	8004fb6 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8004f98:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <HAL_RTC_Init+0xec>)
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a19      	ldr	r1, [r3, #32]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	4319      	orrs	r1, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	490a      	ldr	r1, [pc, #40]	; (8004fdc <HAL_RTC_Init+0xec>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fb6:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <HAL_RTC_Init+0xec>)
 8004fb8:	22ff      	movs	r2, #255	; 0xff
 8004fba:	625a      	str	r2, [r3, #36]	; 0x24
 8004fbc:	e001      	b.n	8004fc2 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d103      	bne.n	8004fd0 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40002800 	.word	0x40002800

08004fe0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8004fe8:	4b0d      	ldr	r3, [pc, #52]	; (8005020 <HAL_RTC_WaitForSynchro+0x40>)
 8004fea:	4a0e      	ldr	r2, [pc, #56]	; (8005024 <HAL_RTC_WaitForSynchro+0x44>)
 8004fec:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004fee:	f7fc fb8f 	bl	8001710 <HAL_GetTick>
 8004ff2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004ff4:	e009      	b.n	800500a <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ff6:	f7fc fb8b 	bl	8001710 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005004:	d901      	bls.n	800500a <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e006      	b.n	8005018 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <HAL_RTC_WaitForSynchro+0x40>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0ef      	beq.n	8004ff6 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40002800 	.word	0x40002800
 8005024:	0001005c 	.word	0x0001005c

08005028 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005034:	4b15      	ldr	r3, [pc, #84]	; (800508c <RTC_EnterInitMode+0x64>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	d120      	bne.n	8005082 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005040:	4b12      	ldr	r3, [pc, #72]	; (800508c <RTC_EnterInitMode+0x64>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	4a11      	ldr	r2, [pc, #68]	; (800508c <RTC_EnterInitMode+0x64>)
 8005046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800504c:	f7fc fb60 	bl	8001710 <HAL_GetTick>
 8005050:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005052:	e00d      	b.n	8005070 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005054:	f7fc fb5c 	bl	8001710 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005062:	d905      	bls.n	8005070 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2203      	movs	r2, #3
 800506c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005070:	4b06      	ldr	r3, [pc, #24]	; (800508c <RTC_EnterInitMode+0x64>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005078:	2b00      	cmp	r3, #0
 800507a:	d102      	bne.n	8005082 <RTC_EnterInitMode+0x5a>
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	2b03      	cmp	r3, #3
 8005080:	d1e8      	bne.n	8005054 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005082:	7bfb      	ldrb	r3, [r7, #15]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40002800 	.word	0x40002800

08005090 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005098:	2300      	movs	r3, #0
 800509a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800509c:	4b1a      	ldr	r3, [pc, #104]	; (8005108 <RTC_ExitInitMode+0x78>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	4a19      	ldr	r2, [pc, #100]	; (8005108 <RTC_ExitInitMode+0x78>)
 80050a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050a6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80050a8:	4b17      	ldr	r3, [pc, #92]	; (8005108 <RTC_ExitInitMode+0x78>)
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10c      	bne.n	80050ce <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff ff93 	bl	8004fe0 <HAL_RTC_WaitForSynchro>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01e      	beq.n	80050fe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2203      	movs	r2, #3
 80050c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	73fb      	strb	r3, [r7, #15]
 80050cc:	e017      	b.n	80050fe <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80050ce:	4b0e      	ldr	r3, [pc, #56]	; (8005108 <RTC_ExitInitMode+0x78>)
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	4a0d      	ldr	r2, [pc, #52]	; (8005108 <RTC_ExitInitMode+0x78>)
 80050d4:	f023 0320 	bic.w	r3, r3, #32
 80050d8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff ff80 	bl	8004fe0 <HAL_RTC_WaitForSynchro>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2203      	movs	r2, #3
 80050ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <RTC_ExitInitMode+0x78>)
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	4a04      	ldr	r2, [pc, #16]	; (8005108 <RTC_ExitInitMode+0x78>)
 80050f8:	f043 0320 	orr.w	r3, r3, #32
 80050fc:	6193      	str	r3, [r2, #24]
  }

  return status;
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40002800 	.word	0x40002800

0800510c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	490f      	ldr	r1, [pc, #60]	; (800515c <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8005120:	4313      	orrs	r3, r2
 8005122:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	490c      	ldr	r1, [pc, #48]	; (8005160 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800512e:	4313      	orrs	r3, r2
 8005130:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6919      	ldr	r1, [r3, #16]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	041b      	lsls	r3, r3, #16
 8005144:	430b      	orrs	r3, r1
 8005146:	4906      	ldr	r1, [pc, #24]	; (8005160 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005148:	4313      	orrs	r3, r2
 800514a:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40002800 	.word	0x40002800
 8005160:	40003400 	.word	0x40003400

08005164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e049      	b.n	800520a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fc f81a 	bl	80011c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3304      	adds	r3, #4
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f000 fbae 	bl	8005904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b082      	sub	sp, #8
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e049      	b.n	80052b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d106      	bne.n	800523e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f841 	bl	80052c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3304      	adds	r3, #4
 800524e:	4619      	mov	r1, r3
 8005250:	4610      	mov	r0, r2
 8005252:	f000 fb57 	bl	8005904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d020      	beq.n	8005338 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01b      	beq.n	8005338 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0202 	mvn.w	r2, #2
 8005308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fad1 	bl	80058c6 <HAL_TIM_IC_CaptureCallback>
 8005324:	e005      	b.n	8005332 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fac3 	bl	80058b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fad4 	bl	80058da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d020      	beq.n	8005384 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01b      	beq.n	8005384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0204 	mvn.w	r2, #4
 8005354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2202      	movs	r2, #2
 800535a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 faab 	bl	80058c6 <HAL_TIM_IC_CaptureCallback>
 8005370:	e005      	b.n	800537e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fa9d 	bl	80058b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 faae 	bl	80058da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b00      	cmp	r3, #0
 800538c:	d020      	beq.n	80053d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01b      	beq.n	80053d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0208 	mvn.w	r2, #8
 80053a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2204      	movs	r2, #4
 80053a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fa85 	bl	80058c6 <HAL_TIM_IC_CaptureCallback>
 80053bc:	e005      	b.n	80053ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fa77 	bl	80058b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fa88 	bl	80058da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 0310 	and.w	r3, r3, #16
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d020      	beq.n	800541c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01b      	beq.n	800541c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0210 	mvn.w	r2, #16
 80053ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2208      	movs	r2, #8
 80053f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fa5f 	bl	80058c6 <HAL_TIM_IC_CaptureCallback>
 8005408:	e005      	b.n	8005416 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fa51 	bl	80058b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fa62 	bl	80058da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00c      	beq.n	8005440 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d007      	beq.n	8005440 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f06f 0201 	mvn.w	r2, #1
 8005438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fa2f 	bl	800589e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d104      	bne.n	8005454 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00c      	beq.n	800546e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545a:	2b00      	cmp	r3, #0
 800545c:	d007      	beq.n	800546e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fef5 	bl	8006258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00c      	beq.n	8005492 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800548a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 feed 	bl	800626c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00c      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d007      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 fa1c 	bl	80058ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00c      	beq.n	80054da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d007      	beq.n	80054da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f06f 0220 	mvn.w	r2, #32
 80054d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 feb5 	bl	8006244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d101      	bne.n	8005502 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054fe:	2302      	movs	r3, #2
 8005500:	e0ff      	b.n	8005702 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b14      	cmp	r3, #20
 800550e:	f200 80f0 	bhi.w	80056f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005512:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005518:	0800556d 	.word	0x0800556d
 800551c:	080056f3 	.word	0x080056f3
 8005520:	080056f3 	.word	0x080056f3
 8005524:	080056f3 	.word	0x080056f3
 8005528:	080055ad 	.word	0x080055ad
 800552c:	080056f3 	.word	0x080056f3
 8005530:	080056f3 	.word	0x080056f3
 8005534:	080056f3 	.word	0x080056f3
 8005538:	080055ef 	.word	0x080055ef
 800553c:	080056f3 	.word	0x080056f3
 8005540:	080056f3 	.word	0x080056f3
 8005544:	080056f3 	.word	0x080056f3
 8005548:	0800562f 	.word	0x0800562f
 800554c:	080056f3 	.word	0x080056f3
 8005550:	080056f3 	.word	0x080056f3
 8005554:	080056f3 	.word	0x080056f3
 8005558:	08005671 	.word	0x08005671
 800555c:	080056f3 	.word	0x080056f3
 8005560:	080056f3 	.word	0x080056f3
 8005564:	080056f3 	.word	0x080056f3
 8005568:	080056b1 	.word	0x080056b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fa6c 	bl	8005a50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0208 	orr.w	r2, r2, #8
 8005586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0204 	bic.w	r2, r2, #4
 8005596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6999      	ldr	r1, [r3, #24]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	691a      	ldr	r2, [r3, #16]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	619a      	str	r2, [r3, #24]
      break;
 80055aa:	e0a5      	b.n	80056f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fadc 	bl	8005b70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6999      	ldr	r1, [r3, #24]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	021a      	lsls	r2, r3, #8
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	619a      	str	r2, [r3, #24]
      break;
 80055ec:	e084      	b.n	80056f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fb45 	bl	8005c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f042 0208 	orr.w	r2, r2, #8
 8005608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0204 	bic.w	r2, r2, #4
 8005618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69d9      	ldr	r1, [r3, #28]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	61da      	str	r2, [r3, #28]
      break;
 800562c:	e064      	b.n	80056f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fbad 	bl	8005d94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69da      	ldr	r2, [r3, #28]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69d9      	ldr	r1, [r3, #28]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	021a      	lsls	r2, r3, #8
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	61da      	str	r2, [r3, #28]
      break;
 800566e:	e043      	b.n	80056f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fbf6 	bl	8005e68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0208 	orr.w	r2, r2, #8
 800568a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0204 	bic.w	r2, r2, #4
 800569a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056ae:	e023      	b.n	80056f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68b9      	ldr	r1, [r7, #8]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fc3a 	bl	8005f30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	021a      	lsls	r2, r3, #8
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056f0:	e002      	b.n	80056f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	75fb      	strb	r3, [r7, #23]
      break;
 80056f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005700:	7dfb      	ldrb	r3, [r7, #23]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop

0800570c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_TIM_ConfigClockSource+0x1c>
 8005724:	2302      	movs	r3, #2
 8005726:	e0b6      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x18a>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005746:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800574a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005752:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005764:	d03e      	beq.n	80057e4 <HAL_TIM_ConfigClockSource+0xd8>
 8005766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576a:	f200 8087 	bhi.w	800587c <HAL_TIM_ConfigClockSource+0x170>
 800576e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005772:	f000 8086 	beq.w	8005882 <HAL_TIM_ConfigClockSource+0x176>
 8005776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577a:	d87f      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x170>
 800577c:	2b70      	cmp	r3, #112	; 0x70
 800577e:	d01a      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0xaa>
 8005780:	2b70      	cmp	r3, #112	; 0x70
 8005782:	d87b      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x170>
 8005784:	2b60      	cmp	r3, #96	; 0x60
 8005786:	d050      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x11e>
 8005788:	2b60      	cmp	r3, #96	; 0x60
 800578a:	d877      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x170>
 800578c:	2b50      	cmp	r3, #80	; 0x50
 800578e:	d03c      	beq.n	800580a <HAL_TIM_ConfigClockSource+0xfe>
 8005790:	2b50      	cmp	r3, #80	; 0x50
 8005792:	d873      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x170>
 8005794:	2b40      	cmp	r3, #64	; 0x40
 8005796:	d058      	beq.n	800584a <HAL_TIM_ConfigClockSource+0x13e>
 8005798:	2b40      	cmp	r3, #64	; 0x40
 800579a:	d86f      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x170>
 800579c:	2b30      	cmp	r3, #48	; 0x30
 800579e:	d064      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x15e>
 80057a0:	2b30      	cmp	r3, #48	; 0x30
 80057a2:	d86b      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x170>
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d060      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x15e>
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	d867      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x170>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d05c      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x15e>
 80057b0:	2b10      	cmp	r3, #16
 80057b2:	d05a      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x15e>
 80057b4:	e062      	b.n	800587c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057c6:	f000 fc95 	bl	80060f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	609a      	str	r2, [r3, #8]
      break;
 80057e2:	e04f      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057f4:	f000 fc7e 	bl	80060f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005806:	609a      	str	r2, [r3, #8]
      break;
 8005808:	e03c      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005816:	461a      	mov	r2, r3
 8005818:	f000 fbf0 	bl	8005ffc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2150      	movs	r1, #80	; 0x50
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fc49 	bl	80060ba <TIM_ITRx_SetConfig>
      break;
 8005828:	e02c      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005836:	461a      	mov	r2, r3
 8005838:	f000 fc0f 	bl	800605a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2160      	movs	r1, #96	; 0x60
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fc39 	bl	80060ba <TIM_ITRx_SetConfig>
      break;
 8005848:	e01c      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005856:	461a      	mov	r2, r3
 8005858:	f000 fbd0 	bl	8005ffc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2140      	movs	r1, #64	; 0x40
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fc29 	bl	80060ba <TIM_ITRx_SetConfig>
      break;
 8005868:	e00c      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4619      	mov	r1, r3
 8005874:	4610      	mov	r0, r2
 8005876:	f000 fc20 	bl	80060ba <TIM_ITRx_SetConfig>
      break;
 800587a:	e003      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	73fb      	strb	r3, [r7, #15]
      break;
 8005880:	e000      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005882:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005894:	7bfb      	ldrb	r3, [r7, #15]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
	...

08005904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a46      	ldr	r2, [pc, #280]	; (8005a30 <TIM_Base_SetConfig+0x12c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d013      	beq.n	8005944 <TIM_Base_SetConfig+0x40>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005922:	d00f      	beq.n	8005944 <TIM_Base_SetConfig+0x40>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a43      	ldr	r2, [pc, #268]	; (8005a34 <TIM_Base_SetConfig+0x130>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00b      	beq.n	8005944 <TIM_Base_SetConfig+0x40>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a42      	ldr	r2, [pc, #264]	; (8005a38 <TIM_Base_SetConfig+0x134>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d007      	beq.n	8005944 <TIM_Base_SetConfig+0x40>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a41      	ldr	r2, [pc, #260]	; (8005a3c <TIM_Base_SetConfig+0x138>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d003      	beq.n	8005944 <TIM_Base_SetConfig+0x40>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a40      	ldr	r2, [pc, #256]	; (8005a40 <TIM_Base_SetConfig+0x13c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d108      	bne.n	8005956 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	4313      	orrs	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a35      	ldr	r2, [pc, #212]	; (8005a30 <TIM_Base_SetConfig+0x12c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d01f      	beq.n	800599e <TIM_Base_SetConfig+0x9a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005964:	d01b      	beq.n	800599e <TIM_Base_SetConfig+0x9a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a32      	ldr	r2, [pc, #200]	; (8005a34 <TIM_Base_SetConfig+0x130>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d017      	beq.n	800599e <TIM_Base_SetConfig+0x9a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a31      	ldr	r2, [pc, #196]	; (8005a38 <TIM_Base_SetConfig+0x134>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d013      	beq.n	800599e <TIM_Base_SetConfig+0x9a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a30      	ldr	r2, [pc, #192]	; (8005a3c <TIM_Base_SetConfig+0x138>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00f      	beq.n	800599e <TIM_Base_SetConfig+0x9a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a2f      	ldr	r2, [pc, #188]	; (8005a40 <TIM_Base_SetConfig+0x13c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d00b      	beq.n	800599e <TIM_Base_SetConfig+0x9a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a2e      	ldr	r2, [pc, #184]	; (8005a44 <TIM_Base_SetConfig+0x140>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d007      	beq.n	800599e <TIM_Base_SetConfig+0x9a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a2d      	ldr	r2, [pc, #180]	; (8005a48 <TIM_Base_SetConfig+0x144>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d003      	beq.n	800599e <TIM_Base_SetConfig+0x9a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2c      	ldr	r2, [pc, #176]	; (8005a4c <TIM_Base_SetConfig+0x148>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d108      	bne.n	80059b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a16      	ldr	r2, [pc, #88]	; (8005a30 <TIM_Base_SetConfig+0x12c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00f      	beq.n	80059fc <TIM_Base_SetConfig+0xf8>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a18      	ldr	r2, [pc, #96]	; (8005a40 <TIM_Base_SetConfig+0x13c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00b      	beq.n	80059fc <TIM_Base_SetConfig+0xf8>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a17      	ldr	r2, [pc, #92]	; (8005a44 <TIM_Base_SetConfig+0x140>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d007      	beq.n	80059fc <TIM_Base_SetConfig+0xf8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a16      	ldr	r2, [pc, #88]	; (8005a48 <TIM_Base_SetConfig+0x144>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d003      	beq.n	80059fc <TIM_Base_SetConfig+0xf8>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a15      	ldr	r2, [pc, #84]	; (8005a4c <TIM_Base_SetConfig+0x148>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d103      	bne.n	8005a04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	691a      	ldr	r2, [r3, #16]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d105      	bne.n	8005a22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f023 0201 	bic.w	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	611a      	str	r2, [r3, #16]
  }
}
 8005a22:	bf00      	nop
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	40012c00 	.word	0x40012c00
 8005a34:	40000400 	.word	0x40000400
 8005a38:	40000800 	.word	0x40000800
 8005a3c:	40000c00 	.word	0x40000c00
 8005a40:	40013400 	.word	0x40013400
 8005a44:	40014000 	.word	0x40014000
 8005a48:	40014400 	.word	0x40014400
 8005a4c:	40014800 	.word	0x40014800

08005a50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	f023 0201 	bic.w	r2, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0303 	bic.w	r3, r3, #3
 8005a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f023 0302 	bic.w	r3, r3, #2
 8005a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a2c      	ldr	r2, [pc, #176]	; (8005b5c <TIM_OC1_SetConfig+0x10c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00f      	beq.n	8005ad0 <TIM_OC1_SetConfig+0x80>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a2b      	ldr	r2, [pc, #172]	; (8005b60 <TIM_OC1_SetConfig+0x110>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00b      	beq.n	8005ad0 <TIM_OC1_SetConfig+0x80>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a2a      	ldr	r2, [pc, #168]	; (8005b64 <TIM_OC1_SetConfig+0x114>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d007      	beq.n	8005ad0 <TIM_OC1_SetConfig+0x80>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a29      	ldr	r2, [pc, #164]	; (8005b68 <TIM_OC1_SetConfig+0x118>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_OC1_SetConfig+0x80>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a28      	ldr	r2, [pc, #160]	; (8005b6c <TIM_OC1_SetConfig+0x11c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d10c      	bne.n	8005aea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f023 0308 	bic.w	r3, r3, #8
 8005ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f023 0304 	bic.w	r3, r3, #4
 8005ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a1b      	ldr	r2, [pc, #108]	; (8005b5c <TIM_OC1_SetConfig+0x10c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00f      	beq.n	8005b12 <TIM_OC1_SetConfig+0xc2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a1a      	ldr	r2, [pc, #104]	; (8005b60 <TIM_OC1_SetConfig+0x110>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00b      	beq.n	8005b12 <TIM_OC1_SetConfig+0xc2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a19      	ldr	r2, [pc, #100]	; (8005b64 <TIM_OC1_SetConfig+0x114>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d007      	beq.n	8005b12 <TIM_OC1_SetConfig+0xc2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <TIM_OC1_SetConfig+0x118>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d003      	beq.n	8005b12 <TIM_OC1_SetConfig+0xc2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a17      	ldr	r2, [pc, #92]	; (8005b6c <TIM_OC1_SetConfig+0x11c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d111      	bne.n	8005b36 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	621a      	str	r2, [r3, #32]
}
 8005b50:	bf00      	nop
 8005b52:	371c      	adds	r7, #28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	40012c00 	.word	0x40012c00
 8005b60:	40013400 	.word	0x40013400
 8005b64:	40014000 	.word	0x40014000
 8005b68:	40014400 	.word	0x40014400
 8005b6c:	40014800 	.word	0x40014800

08005b70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	f023 0210 	bic.w	r2, r3, #16
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f023 0320 	bic.w	r3, r3, #32
 8005bbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a28      	ldr	r2, [pc, #160]	; (8005c70 <TIM_OC2_SetConfig+0x100>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d003      	beq.n	8005bdc <TIM_OC2_SetConfig+0x6c>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a27      	ldr	r2, [pc, #156]	; (8005c74 <TIM_OC2_SetConfig+0x104>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d10d      	bne.n	8005bf8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bf6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a1d      	ldr	r2, [pc, #116]	; (8005c70 <TIM_OC2_SetConfig+0x100>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00f      	beq.n	8005c20 <TIM_OC2_SetConfig+0xb0>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a1c      	ldr	r2, [pc, #112]	; (8005c74 <TIM_OC2_SetConfig+0x104>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00b      	beq.n	8005c20 <TIM_OC2_SetConfig+0xb0>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a1b      	ldr	r2, [pc, #108]	; (8005c78 <TIM_OC2_SetConfig+0x108>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d007      	beq.n	8005c20 <TIM_OC2_SetConfig+0xb0>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a1a      	ldr	r2, [pc, #104]	; (8005c7c <TIM_OC2_SetConfig+0x10c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d003      	beq.n	8005c20 <TIM_OC2_SetConfig+0xb0>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a19      	ldr	r2, [pc, #100]	; (8005c80 <TIM_OC2_SetConfig+0x110>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d113      	bne.n	8005c48 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	621a      	str	r2, [r3, #32]
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40012c00 	.word	0x40012c00
 8005c74:	40013400 	.word	0x40013400
 8005c78:	40014000 	.word	0x40014000
 8005c7c:	40014400 	.word	0x40014400
 8005c80:	40014800 	.word	0x40014800

08005c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0303 	bic.w	r3, r3, #3
 8005cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	021b      	lsls	r3, r3, #8
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a27      	ldr	r2, [pc, #156]	; (8005d80 <TIM_OC3_SetConfig+0xfc>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d003      	beq.n	8005cee <TIM_OC3_SetConfig+0x6a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a26      	ldr	r2, [pc, #152]	; (8005d84 <TIM_OC3_SetConfig+0x100>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d10d      	bne.n	8005d0a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	021b      	lsls	r3, r3, #8
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a1c      	ldr	r2, [pc, #112]	; (8005d80 <TIM_OC3_SetConfig+0xfc>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d00f      	beq.n	8005d32 <TIM_OC3_SetConfig+0xae>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a1b      	ldr	r2, [pc, #108]	; (8005d84 <TIM_OC3_SetConfig+0x100>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00b      	beq.n	8005d32 <TIM_OC3_SetConfig+0xae>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a1a      	ldr	r2, [pc, #104]	; (8005d88 <TIM_OC3_SetConfig+0x104>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d007      	beq.n	8005d32 <TIM_OC3_SetConfig+0xae>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a19      	ldr	r2, [pc, #100]	; (8005d8c <TIM_OC3_SetConfig+0x108>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d003      	beq.n	8005d32 <TIM_OC3_SetConfig+0xae>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a18      	ldr	r2, [pc, #96]	; (8005d90 <TIM_OC3_SetConfig+0x10c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d113      	bne.n	8005d5a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	621a      	str	r2, [r3, #32]
}
 8005d74:	bf00      	nop
 8005d76:	371c      	adds	r7, #28
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	40012c00 	.word	0x40012c00
 8005d84:	40013400 	.word	0x40013400
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40014400 	.word	0x40014400
 8005d90:	40014800 	.word	0x40014800

08005d94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	021b      	lsls	r3, r3, #8
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	031b      	lsls	r3, r3, #12
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a18      	ldr	r2, [pc, #96]	; (8005e54 <TIM_OC4_SetConfig+0xc0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d00f      	beq.n	8005e18 <TIM_OC4_SetConfig+0x84>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a17      	ldr	r2, [pc, #92]	; (8005e58 <TIM_OC4_SetConfig+0xc4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00b      	beq.n	8005e18 <TIM_OC4_SetConfig+0x84>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a16      	ldr	r2, [pc, #88]	; (8005e5c <TIM_OC4_SetConfig+0xc8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d007      	beq.n	8005e18 <TIM_OC4_SetConfig+0x84>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a15      	ldr	r2, [pc, #84]	; (8005e60 <TIM_OC4_SetConfig+0xcc>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d003      	beq.n	8005e18 <TIM_OC4_SetConfig+0x84>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a14      	ldr	r2, [pc, #80]	; (8005e64 <TIM_OC4_SetConfig+0xd0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d109      	bne.n	8005e2c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	019b      	lsls	r3, r3, #6
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	621a      	str	r2, [r3, #32]
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40012c00 	.word	0x40012c00
 8005e58:	40013400 	.word	0x40013400
 8005e5c:	40014000 	.word	0x40014000
 8005e60:	40014400 	.word	0x40014400
 8005e64:	40014800 	.word	0x40014800

08005e68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005eac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	041b      	lsls	r3, r3, #16
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a17      	ldr	r2, [pc, #92]	; (8005f1c <TIM_OC5_SetConfig+0xb4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d00f      	beq.n	8005ee2 <TIM_OC5_SetConfig+0x7a>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a16      	ldr	r2, [pc, #88]	; (8005f20 <TIM_OC5_SetConfig+0xb8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00b      	beq.n	8005ee2 <TIM_OC5_SetConfig+0x7a>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a15      	ldr	r2, [pc, #84]	; (8005f24 <TIM_OC5_SetConfig+0xbc>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d007      	beq.n	8005ee2 <TIM_OC5_SetConfig+0x7a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a14      	ldr	r2, [pc, #80]	; (8005f28 <TIM_OC5_SetConfig+0xc0>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d003      	beq.n	8005ee2 <TIM_OC5_SetConfig+0x7a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a13      	ldr	r2, [pc, #76]	; (8005f2c <TIM_OC5_SetConfig+0xc4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d109      	bne.n	8005ef6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	021b      	lsls	r3, r3, #8
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	621a      	str	r2, [r3, #32]
}
 8005f10:	bf00      	nop
 8005f12:	371c      	adds	r7, #28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	40012c00 	.word	0x40012c00
 8005f20:	40013400 	.word	0x40013400
 8005f24:	40014000 	.word	0x40014000
 8005f28:	40014400 	.word	0x40014400
 8005f2c:	40014800 	.word	0x40014800

08005f30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	021b      	lsls	r3, r3, #8
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	051b      	lsls	r3, r3, #20
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a18      	ldr	r2, [pc, #96]	; (8005fe8 <TIM_OC6_SetConfig+0xb8>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d00f      	beq.n	8005fac <TIM_OC6_SetConfig+0x7c>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a17      	ldr	r2, [pc, #92]	; (8005fec <TIM_OC6_SetConfig+0xbc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00b      	beq.n	8005fac <TIM_OC6_SetConfig+0x7c>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a16      	ldr	r2, [pc, #88]	; (8005ff0 <TIM_OC6_SetConfig+0xc0>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d007      	beq.n	8005fac <TIM_OC6_SetConfig+0x7c>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a15      	ldr	r2, [pc, #84]	; (8005ff4 <TIM_OC6_SetConfig+0xc4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d003      	beq.n	8005fac <TIM_OC6_SetConfig+0x7c>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a14      	ldr	r2, [pc, #80]	; (8005ff8 <TIM_OC6_SetConfig+0xc8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d109      	bne.n	8005fc0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	029b      	lsls	r3, r3, #10
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	621a      	str	r2, [r3, #32]
}
 8005fda:	bf00      	nop
 8005fdc:	371c      	adds	r7, #28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	40012c00 	.word	0x40012c00
 8005fec:	40013400 	.word	0x40013400
 8005ff0:	40014000 	.word	0x40014000
 8005ff4:	40014400 	.word	0x40014400
 8005ff8:	40014800 	.word	0x40014800

08005ffc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	f023 0201 	bic.w	r2, r3, #1
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	4313      	orrs	r3, r2
 8006030:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f023 030a 	bic.w	r3, r3, #10
 8006038:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4313      	orrs	r3, r2
 8006040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	621a      	str	r2, [r3, #32]
}
 800604e:	bf00      	nop
 8006050:	371c      	adds	r7, #28
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800605a:	b480      	push	{r7}
 800605c:	b087      	sub	sp, #28
 800605e:	af00      	add	r7, sp, #0
 8006060:	60f8      	str	r0, [r7, #12]
 8006062:	60b9      	str	r1, [r7, #8]
 8006064:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	f023 0210 	bic.w	r2, r3, #16
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006084:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	031b      	lsls	r3, r3, #12
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006096:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	011b      	lsls	r3, r3, #4
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	621a      	str	r2, [r3, #32]
}
 80060ae:	bf00      	nop
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b085      	sub	sp, #20
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80060d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4313      	orrs	r3, r2
 80060dc:	f043 0307 	orr.w	r3, r3, #7
 80060e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	609a      	str	r2, [r3, #8]
}
 80060e8:	bf00      	nop
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800610e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	021a      	lsls	r2, r3, #8
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	431a      	orrs	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4313      	orrs	r3, r2
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	609a      	str	r2, [r3, #8]
}
 8006128:	bf00      	nop
 800612a:	371c      	adds	r7, #28
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006148:	2302      	movs	r3, #2
 800614a:	e068      	b.n	800621e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a2e      	ldr	r2, [pc, #184]	; (800622c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d004      	beq.n	8006180 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a2d      	ldr	r2, [pc, #180]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d108      	bne.n	8006192 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006186:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006198:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a1e      	ldr	r2, [pc, #120]	; (800622c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d01d      	beq.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061be:	d018      	beq.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a1b      	ldr	r2, [pc, #108]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a1a      	ldr	r2, [pc, #104]	; (8006238 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00e      	beq.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a18      	ldr	r2, [pc, #96]	; (800623c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d009      	beq.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a13      	ldr	r2, [pc, #76]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d004      	beq.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a14      	ldr	r2, [pc, #80]	; (8006240 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d10c      	bne.n	800620c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	4313      	orrs	r3, r2
 8006202:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	40012c00 	.word	0x40012c00
 8006230:	40013400 	.word	0x40013400
 8006234:	40000400 	.word	0x40000400
 8006238:	40000800 	.word	0x40000800
 800623c:	40000c00 	.word	0x40000c00
 8006240:	40014000 	.word	0x40014000

08006244 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e042      	b.n	8006318 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006298:	2b00      	cmp	r3, #0
 800629a:	d106      	bne.n	80062aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7fa fe45 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2224      	movs	r2, #36	; 0x24
 80062ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 0201 	bic.w	r2, r2, #1
 80062c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fe6c 	bl	8006fa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fb69 	bl	80069a8 <UART_SetConfig>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d101      	bne.n	80062e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e01b      	b.n	8006318 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0201 	orr.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 feeb 	bl	80070ec <UART_CheckIdleState>
 8006316:	4603      	mov	r3, r0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b0ba      	sub	sp, #232	; 0xe8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006346:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800634a:	f640 030f 	movw	r3, #2063	; 0x80f
 800634e:	4013      	ands	r3, r2
 8006350:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006354:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006358:	2b00      	cmp	r3, #0
 800635a:	d11b      	bne.n	8006394 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800635c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b00      	cmp	r3, #0
 8006366:	d015      	beq.n	8006394 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800636c:	f003 0320 	and.w	r3, r3, #32
 8006370:	2b00      	cmp	r3, #0
 8006372:	d105      	bne.n	8006380 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d009      	beq.n	8006394 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 82e3 	beq.w	8006950 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	4798      	blx	r3
      }
      return;
 8006392:	e2dd      	b.n	8006950 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 8123 	beq.w	80065e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800639e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80063a2:	4b8d      	ldr	r3, [pc, #564]	; (80065d8 <HAL_UART_IRQHandler+0x2b8>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80063aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80063ae:	4b8b      	ldr	r3, [pc, #556]	; (80065dc <HAL_UART_IRQHandler+0x2bc>)
 80063b0:	4013      	ands	r3, r2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 8116 	beq.w	80065e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d011      	beq.n	80063e8 <HAL_UART_IRQHandler+0xc8>
 80063c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00b      	beq.n	80063e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2201      	movs	r2, #1
 80063d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063de:	f043 0201 	orr.w	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d011      	beq.n	8006418 <HAL_UART_IRQHandler+0xf8>
 80063f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00b      	beq.n	8006418 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2202      	movs	r2, #2
 8006406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640e:	f043 0204 	orr.w	r2, r3, #4
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d011      	beq.n	8006448 <HAL_UART_IRQHandler+0x128>
 8006424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00b      	beq.n	8006448 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2204      	movs	r2, #4
 8006436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643e:	f043 0202 	orr.w	r2, r3, #2
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644c:	f003 0308 	and.w	r3, r3, #8
 8006450:	2b00      	cmp	r3, #0
 8006452:	d017      	beq.n	8006484 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	2b00      	cmp	r3, #0
 800645e:	d105      	bne.n	800646c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006460:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006464:	4b5c      	ldr	r3, [pc, #368]	; (80065d8 <HAL_UART_IRQHandler+0x2b8>)
 8006466:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00b      	beq.n	8006484 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2208      	movs	r2, #8
 8006472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647a:	f043 0208 	orr.w	r2, r3, #8
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800648c:	2b00      	cmp	r3, #0
 800648e:	d012      	beq.n	80064b6 <HAL_UART_IRQHandler+0x196>
 8006490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006494:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00c      	beq.n	80064b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ac:	f043 0220 	orr.w	r2, r3, #32
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 8249 	beq.w	8006954 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d013      	beq.n	80064f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d105      	bne.n	80064e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d007      	beq.n	80064f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650a:	2b40      	cmp	r3, #64	; 0x40
 800650c:	d005      	beq.n	800651a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800650e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006512:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006516:	2b00      	cmp	r3, #0
 8006518:	d054      	beq.n	80065c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fefd 	bl	800731a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d146      	bne.n	80065bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3308      	adds	r3, #8
 8006534:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006544:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800654c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3308      	adds	r3, #8
 8006556:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800655a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800655e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006566:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800656a:	e841 2300 	strex	r3, r2, [r1]
 800656e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1d9      	bne.n	800652e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006580:	2b00      	cmp	r3, #0
 8006582:	d017      	beq.n	80065b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800658a:	4a15      	ldr	r2, [pc, #84]	; (80065e0 <HAL_UART_IRQHandler+0x2c0>)
 800658c:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006594:	4618      	mov	r0, r3
 8006596:	f7fc fa7b 	bl	8002a90 <HAL_DMA_Abort_IT>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d019      	beq.n	80065d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80065ae:	4610      	mov	r0, r2
 80065b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b2:	e00f      	b.n	80065d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f9e1 	bl	800697c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ba:	e00b      	b.n	80065d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f9dd 	bl	800697c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c2:	e007      	b.n	80065d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f9d9 	bl	800697c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80065d2:	e1bf      	b.n	8006954 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d4:	bf00      	nop
    return;
 80065d6:	e1bd      	b.n	8006954 <HAL_UART_IRQHandler+0x634>
 80065d8:	10000001 	.word	0x10000001
 80065dc:	04000120 	.word	0x04000120
 80065e0:	080073e7 	.word	0x080073e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	f040 8153 	bne.w	8006894 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f2:	f003 0310 	and.w	r3, r3, #16
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 814c 	beq.w	8006894 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006600:	f003 0310 	and.w	r3, r3, #16
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 8145 	beq.w	8006894 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2210      	movs	r2, #16
 8006610:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661c:	2b40      	cmp	r3, #64	; 0x40
 800661e:	f040 80bb 	bne.w	8006798 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006630:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 818f 	beq.w	8006958 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006640:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006644:	429a      	cmp	r2, r3
 8006646:	f080 8187 	bcs.w	8006958 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006650:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b00      	cmp	r3, #0
 8006664:	f040 8087 	bne.w	8006776 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800667c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006684:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006692:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006696:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800669e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1da      	bne.n	8006668 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3308      	adds	r3, #8
 80066b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066bc:	e853 3f00 	ldrex	r3, [r3]
 80066c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80066c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066c4:	f023 0301 	bic.w	r3, r3, #1
 80066c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3308      	adds	r3, #8
 80066d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1e1      	bne.n	80066b2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3308      	adds	r3, #8
 80066f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3308      	adds	r3, #8
 800670e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006712:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006714:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006718:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e3      	bne.n	80066ee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006744:	f023 0310 	bic.w	r3, r3, #16
 8006748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	461a      	mov	r2, r3
 8006752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006756:	65bb      	str	r3, [r7, #88]	; 0x58
 8006758:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800675c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800675e:	e841 2300 	strex	r3, r2, [r1]
 8006762:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1e4      	bne.n	8006734 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006770:	4618      	mov	r0, r3
 8006772:	f7fc f931 	bl	80029d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2202      	movs	r2, #2
 800677a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006788:	b29b      	uxth	r3, r3
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	b29b      	uxth	r3, r3
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f8fd 	bl	8006990 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006796:	e0df      	b.n	8006958 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 80d1 	beq.w	800695c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80067ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 80cc 	beq.w	800695c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	461a      	mov	r2, r3
 80067e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067e6:	647b      	str	r3, [r7, #68]	; 0x44
 80067e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e4      	bne.n	80067c4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3308      	adds	r3, #8
 8006800:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	623b      	str	r3, [r7, #32]
   return(result);
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006810:	f023 0301 	bic.w	r3, r3, #1
 8006814:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3308      	adds	r3, #8
 800681e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006822:	633a      	str	r2, [r7, #48]	; 0x30
 8006824:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e1      	bne.n	80067fa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2220      	movs	r2, #32
 800683a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	e853 3f00 	ldrex	r3, [r3]
 8006856:	60fb      	str	r3, [r7, #12]
   return(result);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0310 	bic.w	r3, r3, #16
 800685e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800686c:	61fb      	str	r3, [r7, #28]
 800686e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	69b9      	ldr	r1, [r7, #24]
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	617b      	str	r3, [r7, #20]
   return(result);
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e4      	bne.n	800684a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006886:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f87f 	bl	8006990 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006892:	e063      	b.n	800695c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00e      	beq.n	80068be <HAL_UART_IRQHandler+0x59e>
 80068a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80068b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fdd6 	bl	8007468 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068bc:	e051      	b.n	8006962 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80068be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d014      	beq.n	80068f4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80068ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d105      	bne.n	80068e2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80068d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d008      	beq.n	80068f4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d03a      	beq.n	8006960 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	4798      	blx	r3
    }
    return;
 80068f2:	e035      	b.n	8006960 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d009      	beq.n	8006914 <HAL_UART_IRQHandler+0x5f4>
 8006900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fd80 	bl	8007412 <UART_EndTransmit_IT>
    return;
 8006912:	e026      	b.n	8006962 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006918:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d009      	beq.n	8006934 <HAL_UART_IRQHandler+0x614>
 8006920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006924:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fdaf 	bl	8007490 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006932:	e016      	b.n	8006962 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d010      	beq.n	8006962 <HAL_UART_IRQHandler+0x642>
 8006940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006944:	2b00      	cmp	r3, #0
 8006946:	da0c      	bge.n	8006962 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fd97 	bl	800747c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800694e:	e008      	b.n	8006962 <HAL_UART_IRQHandler+0x642>
      return;
 8006950:	bf00      	nop
 8006952:	e006      	b.n	8006962 <HAL_UART_IRQHandler+0x642>
    return;
 8006954:	bf00      	nop
 8006956:	e004      	b.n	8006962 <HAL_UART_IRQHandler+0x642>
      return;
 8006958:	bf00      	nop
 800695a:	e002      	b.n	8006962 <HAL_UART_IRQHandler+0x642>
      return;
 800695c:	bf00      	nop
 800695e:	e000      	b.n	8006962 <HAL_UART_IRQHandler+0x642>
    return;
 8006960:	bf00      	nop
  }
}
 8006962:	37e8      	adds	r7, #232	; 0xe8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069ac:	b08c      	sub	sp, #48	; 0x30
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	431a      	orrs	r2, r3
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	431a      	orrs	r2, r3
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	4baa      	ldr	r3, [pc, #680]	; (8006c80 <UART_SetConfig+0x2d8>)
 80069d8:	4013      	ands	r3, r2
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069e0:	430b      	orrs	r3, r1
 80069e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a9f      	ldr	r2, [pc, #636]	; (8006c84 <UART_SetConfig+0x2dc>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d004      	beq.n	8006a14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a10:	4313      	orrs	r3, r2
 8006a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006a1e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a32:	f023 010f 	bic.w	r1, r3, #15
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a90      	ldr	r2, [pc, #576]	; (8006c88 <UART_SetConfig+0x2e0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d125      	bne.n	8006a98 <UART_SetConfig+0xf0>
 8006a4c:	4b8f      	ldr	r3, [pc, #572]	; (8006c8c <UART_SetConfig+0x2e4>)
 8006a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a52:	f003 0303 	and.w	r3, r3, #3
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d81a      	bhi.n	8006a90 <UART_SetConfig+0xe8>
 8006a5a:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <UART_SetConfig+0xb8>)
 8006a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a60:	08006a71 	.word	0x08006a71
 8006a64:	08006a81 	.word	0x08006a81
 8006a68:	08006a79 	.word	0x08006a79
 8006a6c:	08006a89 	.word	0x08006a89
 8006a70:	2301      	movs	r3, #1
 8006a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a76:	e116      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a7e:	e112      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006a80:	2304      	movs	r3, #4
 8006a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a86:	e10e      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006a88:	2308      	movs	r3, #8
 8006a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a8e:	e10a      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006a90:	2310      	movs	r3, #16
 8006a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a96:	e106      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a7c      	ldr	r2, [pc, #496]	; (8006c90 <UART_SetConfig+0x2e8>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d138      	bne.n	8006b14 <UART_SetConfig+0x16c>
 8006aa2:	4b7a      	ldr	r3, [pc, #488]	; (8006c8c <UART_SetConfig+0x2e4>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa8:	f003 030c 	and.w	r3, r3, #12
 8006aac:	2b0c      	cmp	r3, #12
 8006aae:	d82d      	bhi.n	8006b0c <UART_SetConfig+0x164>
 8006ab0:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <UART_SetConfig+0x110>)
 8006ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab6:	bf00      	nop
 8006ab8:	08006aed 	.word	0x08006aed
 8006abc:	08006b0d 	.word	0x08006b0d
 8006ac0:	08006b0d 	.word	0x08006b0d
 8006ac4:	08006b0d 	.word	0x08006b0d
 8006ac8:	08006afd 	.word	0x08006afd
 8006acc:	08006b0d 	.word	0x08006b0d
 8006ad0:	08006b0d 	.word	0x08006b0d
 8006ad4:	08006b0d 	.word	0x08006b0d
 8006ad8:	08006af5 	.word	0x08006af5
 8006adc:	08006b0d 	.word	0x08006b0d
 8006ae0:	08006b0d 	.word	0x08006b0d
 8006ae4:	08006b0d 	.word	0x08006b0d
 8006ae8:	08006b05 	.word	0x08006b05
 8006aec:	2300      	movs	r3, #0
 8006aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006af2:	e0d8      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006af4:	2302      	movs	r3, #2
 8006af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006afa:	e0d4      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006afc:	2304      	movs	r3, #4
 8006afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b02:	e0d0      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b04:	2308      	movs	r3, #8
 8006b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b0a:	e0cc      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b12:	e0c8      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a5e      	ldr	r2, [pc, #376]	; (8006c94 <UART_SetConfig+0x2ec>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d125      	bne.n	8006b6a <UART_SetConfig+0x1c2>
 8006b1e:	4b5b      	ldr	r3, [pc, #364]	; (8006c8c <UART_SetConfig+0x2e4>)
 8006b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b28:	2b30      	cmp	r3, #48	; 0x30
 8006b2a:	d016      	beq.n	8006b5a <UART_SetConfig+0x1b2>
 8006b2c:	2b30      	cmp	r3, #48	; 0x30
 8006b2e:	d818      	bhi.n	8006b62 <UART_SetConfig+0x1ba>
 8006b30:	2b20      	cmp	r3, #32
 8006b32:	d00a      	beq.n	8006b4a <UART_SetConfig+0x1a2>
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d814      	bhi.n	8006b62 <UART_SetConfig+0x1ba>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <UART_SetConfig+0x19a>
 8006b3c:	2b10      	cmp	r3, #16
 8006b3e:	d008      	beq.n	8006b52 <UART_SetConfig+0x1aa>
 8006b40:	e00f      	b.n	8006b62 <UART_SetConfig+0x1ba>
 8006b42:	2300      	movs	r3, #0
 8006b44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b48:	e0ad      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b50:	e0a9      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b52:	2304      	movs	r3, #4
 8006b54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b58:	e0a5      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b5a:	2308      	movs	r3, #8
 8006b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b60:	e0a1      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b62:	2310      	movs	r3, #16
 8006b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b68:	e09d      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a4a      	ldr	r2, [pc, #296]	; (8006c98 <UART_SetConfig+0x2f0>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d125      	bne.n	8006bc0 <UART_SetConfig+0x218>
 8006b74:	4b45      	ldr	r3, [pc, #276]	; (8006c8c <UART_SetConfig+0x2e4>)
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b7e:	2bc0      	cmp	r3, #192	; 0xc0
 8006b80:	d016      	beq.n	8006bb0 <UART_SetConfig+0x208>
 8006b82:	2bc0      	cmp	r3, #192	; 0xc0
 8006b84:	d818      	bhi.n	8006bb8 <UART_SetConfig+0x210>
 8006b86:	2b80      	cmp	r3, #128	; 0x80
 8006b88:	d00a      	beq.n	8006ba0 <UART_SetConfig+0x1f8>
 8006b8a:	2b80      	cmp	r3, #128	; 0x80
 8006b8c:	d814      	bhi.n	8006bb8 <UART_SetConfig+0x210>
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <UART_SetConfig+0x1f0>
 8006b92:	2b40      	cmp	r3, #64	; 0x40
 8006b94:	d008      	beq.n	8006ba8 <UART_SetConfig+0x200>
 8006b96:	e00f      	b.n	8006bb8 <UART_SetConfig+0x210>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b9e:	e082      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ba6:	e07e      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006ba8:	2304      	movs	r3, #4
 8006baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bae:	e07a      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006bb0:	2308      	movs	r3, #8
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bb6:	e076      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006bb8:	2310      	movs	r3, #16
 8006bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bbe:	e072      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a35      	ldr	r2, [pc, #212]	; (8006c9c <UART_SetConfig+0x2f4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d12a      	bne.n	8006c20 <UART_SetConfig+0x278>
 8006bca:	4b30      	ldr	r3, [pc, #192]	; (8006c8c <UART_SetConfig+0x2e4>)
 8006bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bd8:	d01a      	beq.n	8006c10 <UART_SetConfig+0x268>
 8006bda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bde:	d81b      	bhi.n	8006c18 <UART_SetConfig+0x270>
 8006be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be4:	d00c      	beq.n	8006c00 <UART_SetConfig+0x258>
 8006be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bea:	d815      	bhi.n	8006c18 <UART_SetConfig+0x270>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <UART_SetConfig+0x250>
 8006bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf4:	d008      	beq.n	8006c08 <UART_SetConfig+0x260>
 8006bf6:	e00f      	b.n	8006c18 <UART_SetConfig+0x270>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bfe:	e052      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c00:	2302      	movs	r3, #2
 8006c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c06:	e04e      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c08:	2304      	movs	r3, #4
 8006c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c0e:	e04a      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c10:	2308      	movs	r3, #8
 8006c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c16:	e046      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c18:	2310      	movs	r3, #16
 8006c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c1e:	e042      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a17      	ldr	r2, [pc, #92]	; (8006c84 <UART_SetConfig+0x2dc>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d13a      	bne.n	8006ca0 <UART_SetConfig+0x2f8>
 8006c2a:	4b18      	ldr	r3, [pc, #96]	; (8006c8c <UART_SetConfig+0x2e4>)
 8006c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c38:	d01a      	beq.n	8006c70 <UART_SetConfig+0x2c8>
 8006c3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c3e:	d81b      	bhi.n	8006c78 <UART_SetConfig+0x2d0>
 8006c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c44:	d00c      	beq.n	8006c60 <UART_SetConfig+0x2b8>
 8006c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c4a:	d815      	bhi.n	8006c78 <UART_SetConfig+0x2d0>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <UART_SetConfig+0x2b0>
 8006c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c54:	d008      	beq.n	8006c68 <UART_SetConfig+0x2c0>
 8006c56:	e00f      	b.n	8006c78 <UART_SetConfig+0x2d0>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c5e:	e022      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c60:	2302      	movs	r3, #2
 8006c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c66:	e01e      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c6e:	e01a      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c70:	2308      	movs	r3, #8
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c76:	e016      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c7e:	e012      	b.n	8006ca6 <UART_SetConfig+0x2fe>
 8006c80:	cfff69f3 	.word	0xcfff69f3
 8006c84:	40008000 	.word	0x40008000
 8006c88:	40013800 	.word	0x40013800
 8006c8c:	40021000 	.word	0x40021000
 8006c90:	40004400 	.word	0x40004400
 8006c94:	40004800 	.word	0x40004800
 8006c98:	40004c00 	.word	0x40004c00
 8006c9c:	40005000 	.word	0x40005000
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4ab0      	ldr	r2, [pc, #704]	; (8006f6c <UART_SetConfig+0x5c4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	f040 809b 	bne.w	8006de8 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cb6:	2b08      	cmp	r3, #8
 8006cb8:	d827      	bhi.n	8006d0a <UART_SetConfig+0x362>
 8006cba:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <UART_SetConfig+0x318>)
 8006cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc0:	08006ce5 	.word	0x08006ce5
 8006cc4:	08006ced 	.word	0x08006ced
 8006cc8:	08006cf5 	.word	0x08006cf5
 8006ccc:	08006d0b 	.word	0x08006d0b
 8006cd0:	08006cfb 	.word	0x08006cfb
 8006cd4:	08006d0b 	.word	0x08006d0b
 8006cd8:	08006d0b 	.word	0x08006d0b
 8006cdc:	08006d0b 	.word	0x08006d0b
 8006ce0:	08006d03 	.word	0x08006d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce4:	f7fd faf4 	bl	80042d0 <HAL_RCC_GetPCLK1Freq>
 8006ce8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cea:	e014      	b.n	8006d16 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cec:	f7fd fb04 	bl	80042f8 <HAL_RCC_GetPCLK2Freq>
 8006cf0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cf2:	e010      	b.n	8006d16 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cf4:	4b9e      	ldr	r3, [pc, #632]	; (8006f70 <UART_SetConfig+0x5c8>)
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cf8:	e00d      	b.n	8006d16 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cfa:	f7fd fa37 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8006cfe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d00:	e009      	b.n	8006d16 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d08:	e005      	b.n	8006d16 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8130 	beq.w	8006f7e <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d22:	4a94      	ldr	r2, [pc, #592]	; (8006f74 <UART_SetConfig+0x5cc>)
 8006d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d30:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	4413      	add	r3, r2
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d305      	bcc.n	8006d4e <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d903      	bls.n	8006d56 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d54:	e113      	b.n	8006f7e <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	2200      	movs	r2, #0
 8006d5a:	60bb      	str	r3, [r7, #8]
 8006d5c:	60fa      	str	r2, [r7, #12]
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d62:	4a84      	ldr	r2, [pc, #528]	; (8006f74 <UART_SetConfig+0x5cc>)
 8006d64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	603b      	str	r3, [r7, #0]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d78:	f7f9 fa5c 	bl	8000234 <__aeabi_uldivmod>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4610      	mov	r0, r2
 8006d82:	4619      	mov	r1, r3
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	020b      	lsls	r3, r1, #8
 8006d8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d92:	0202      	lsls	r2, r0, #8
 8006d94:	6979      	ldr	r1, [r7, #20]
 8006d96:	6849      	ldr	r1, [r1, #4]
 8006d98:	0849      	lsrs	r1, r1, #1
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	460c      	mov	r4, r1
 8006d9e:	4605      	mov	r5, r0
 8006da0:	eb12 0804 	adds.w	r8, r2, r4
 8006da4:	eb43 0905 	adc.w	r9, r3, r5
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	469a      	mov	sl, r3
 8006db0:	4693      	mov	fp, r2
 8006db2:	4652      	mov	r2, sl
 8006db4:	465b      	mov	r3, fp
 8006db6:	4640      	mov	r0, r8
 8006db8:	4649      	mov	r1, r9
 8006dba:	f7f9 fa3b 	bl	8000234 <__aeabi_uldivmod>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dcc:	d308      	bcc.n	8006de0 <UART_SetConfig+0x438>
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dd4:	d204      	bcs.n	8006de0 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6a3a      	ldr	r2, [r7, #32]
 8006ddc:	60da      	str	r2, [r3, #12]
 8006dde:	e0ce      	b.n	8006f7e <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006de6:	e0ca      	b.n	8006f7e <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	69db      	ldr	r3, [r3, #28]
 8006dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df0:	d166      	bne.n	8006ec0 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8006df2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	d827      	bhi.n	8006e4a <UART_SetConfig+0x4a2>
 8006dfa:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <UART_SetConfig+0x458>)
 8006dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e00:	08006e25 	.word	0x08006e25
 8006e04:	08006e2d 	.word	0x08006e2d
 8006e08:	08006e35 	.word	0x08006e35
 8006e0c:	08006e4b 	.word	0x08006e4b
 8006e10:	08006e3b 	.word	0x08006e3b
 8006e14:	08006e4b 	.word	0x08006e4b
 8006e18:	08006e4b 	.word	0x08006e4b
 8006e1c:	08006e4b 	.word	0x08006e4b
 8006e20:	08006e43 	.word	0x08006e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e24:	f7fd fa54 	bl	80042d0 <HAL_RCC_GetPCLK1Freq>
 8006e28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e2a:	e014      	b.n	8006e56 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e2c:	f7fd fa64 	bl	80042f8 <HAL_RCC_GetPCLK2Freq>
 8006e30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e32:	e010      	b.n	8006e56 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e34:	4b4e      	ldr	r3, [pc, #312]	; (8006f70 <UART_SetConfig+0x5c8>)
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e38:	e00d      	b.n	8006e56 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e3a:	f7fd f997 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8006e3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e40:	e009      	b.n	8006e56 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e48:	e005      	b.n	8006e56 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 8090 	beq.w	8006f7e <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	4a44      	ldr	r2, [pc, #272]	; (8006f74 <UART_SetConfig+0x5cc>)
 8006e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e70:	005a      	lsls	r2, r3, #1
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	085b      	lsrs	r3, r3, #1
 8006e78:	441a      	add	r2, r3
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	2b0f      	cmp	r3, #15
 8006e88:	d916      	bls.n	8006eb8 <UART_SetConfig+0x510>
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e90:	d212      	bcs.n	8006eb8 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	f023 030f 	bic.w	r3, r3, #15
 8006e9a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	085b      	lsrs	r3, r3, #1
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	8bfb      	ldrh	r3, [r7, #30]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	8bfa      	ldrh	r2, [r7, #30]
 8006eb4:	60da      	str	r2, [r3, #12]
 8006eb6:	e062      	b.n	8006f7e <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ebe:	e05e      	b.n	8006f7e <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ec0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d828      	bhi.n	8006f1a <UART_SetConfig+0x572>
 8006ec8:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <UART_SetConfig+0x528>)
 8006eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ece:	bf00      	nop
 8006ed0:	08006ef5 	.word	0x08006ef5
 8006ed4:	08006efd 	.word	0x08006efd
 8006ed8:	08006f05 	.word	0x08006f05
 8006edc:	08006f1b 	.word	0x08006f1b
 8006ee0:	08006f0b 	.word	0x08006f0b
 8006ee4:	08006f1b 	.word	0x08006f1b
 8006ee8:	08006f1b 	.word	0x08006f1b
 8006eec:	08006f1b 	.word	0x08006f1b
 8006ef0:	08006f13 	.word	0x08006f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ef4:	f7fd f9ec 	bl	80042d0 <HAL_RCC_GetPCLK1Freq>
 8006ef8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006efa:	e014      	b.n	8006f26 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006efc:	f7fd f9fc 	bl	80042f8 <HAL_RCC_GetPCLK2Freq>
 8006f00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f02:	e010      	b.n	8006f26 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f04:	4b1a      	ldr	r3, [pc, #104]	; (8006f70 <UART_SetConfig+0x5c8>)
 8006f06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f08:	e00d      	b.n	8006f26 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f0a:	f7fd f92f 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8006f0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f10:	e009      	b.n	8006f26 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f18:	e005      	b.n	8006f26 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f24:	bf00      	nop
    }

    if (pclk != 0U)
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d028      	beq.n	8006f7e <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	4a10      	ldr	r2, [pc, #64]	; (8006f74 <UART_SetConfig+0x5cc>)
 8006f32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f36:	461a      	mov	r2, r3
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	085b      	lsrs	r3, r3, #1
 8006f44:	441a      	add	r2, r3
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	2b0f      	cmp	r3, #15
 8006f54:	d910      	bls.n	8006f78 <UART_SetConfig+0x5d0>
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f5c:	d20c      	bcs.n	8006f78 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60da      	str	r2, [r3, #12]
 8006f68:	e009      	b.n	8006f7e <UART_SetConfig+0x5d6>
 8006f6a:	bf00      	nop
 8006f6c:	40008000 	.word	0x40008000
 8006f70:	00f42400 	.word	0x00f42400
 8006f74:	08007b58 	.word	0x08007b58
      }
      else
      {
        ret = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2200      	movs	r2, #0
 8006f92:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2200      	movs	r2, #0
 8006f98:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006f9a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3730      	adds	r7, #48	; 0x30
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00a      	beq.n	8006fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00a      	beq.n	8006ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701a:	f003 0304 	and.w	r3, r3, #4
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703c:	f003 0310 	and.w	r3, r3, #16
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00a      	beq.n	800705a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007084:	2b00      	cmp	r3, #0
 8007086:	d01a      	beq.n	80070be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070a6:	d10a      	bne.n	80070be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	605a      	str	r2, [r3, #4]
  }
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b098      	sub	sp, #96	; 0x60
 80070f0:	af02      	add	r7, sp, #8
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070fc:	f7fa fb08 	bl	8001710 <HAL_GetTick>
 8007100:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0308 	and.w	r3, r3, #8
 800710c:	2b08      	cmp	r3, #8
 800710e:	d12f      	bne.n	8007170 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007118:	2200      	movs	r2, #0
 800711a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f88e 	bl	8007240 <UART_WaitOnFlagUntilTimeout>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d022      	beq.n	8007170 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	e853 3f00 	ldrex	r3, [r3]
 8007136:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800713a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800713e:	653b      	str	r3, [r7, #80]	; 0x50
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	461a      	mov	r2, r3
 8007146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007148:	647b      	str	r3, [r7, #68]	; 0x44
 800714a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800714e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007150:	e841 2300 	strex	r3, r2, [r1]
 8007154:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1e6      	bne.n	800712a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e063      	b.n	8007238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0304 	and.w	r3, r3, #4
 800717a:	2b04      	cmp	r3, #4
 800717c:	d149      	bne.n	8007212 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800717e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007186:	2200      	movs	r2, #0
 8007188:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f857 	bl	8007240 <UART_WaitOnFlagUntilTimeout>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d03c      	beq.n	8007212 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	623b      	str	r3, [r7, #32]
   return(result);
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b6:	633b      	str	r3, [r7, #48]	; 0x30
 80071b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071be:	e841 2300 	strex	r3, r2, [r1]
 80071c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e6      	bne.n	8007198 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3308      	adds	r3, #8
 80071d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f023 0301 	bic.w	r3, r3, #1
 80071e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071ea:	61fa      	str	r2, [r7, #28]
 80071ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	69b9      	ldr	r1, [r7, #24]
 80071f0:	69fa      	ldr	r2, [r7, #28]
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	617b      	str	r3, [r7, #20]
   return(result);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e5      	bne.n	80071ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2220      	movs	r2, #32
 8007202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e012      	b.n	8007238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2220      	movs	r2, #32
 800721e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3758      	adds	r7, #88	; 0x58
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	603b      	str	r3, [r7, #0]
 800724c:	4613      	mov	r3, r2
 800724e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007250:	e04f      	b.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007258:	d04b      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800725a:	f7fa fa59 	bl	8001710 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	429a      	cmp	r2, r3
 8007268:	d302      	bcc.n	8007270 <UART_WaitOnFlagUntilTimeout+0x30>
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e04e      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0304 	and.w	r3, r3, #4
 800727e:	2b00      	cmp	r3, #0
 8007280:	d037      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2b80      	cmp	r3, #128	; 0x80
 8007286:	d034      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2b40      	cmp	r3, #64	; 0x40
 800728c:	d031      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	2b08      	cmp	r3, #8
 800729a:	d110      	bne.n	80072be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2208      	movs	r2, #8
 80072a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f838 	bl	800731a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2208      	movs	r2, #8
 80072ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e029      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072cc:	d111      	bne.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f81e 	bl	800731a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e00f      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69da      	ldr	r2, [r3, #28]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4013      	ands	r3, r2
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	429a      	cmp	r2, r3
 8007300:	bf0c      	ite	eq
 8007302:	2301      	moveq	r3, #1
 8007304:	2300      	movne	r3, #0
 8007306:	b2db      	uxtb	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	429a      	cmp	r2, r3
 800730e:	d0a0      	beq.n	8007252 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800731a:	b480      	push	{r7}
 800731c:	b095      	sub	sp, #84	; 0x54
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800732a:	e853 3f00 	ldrex	r3, [r3]
 800732e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007340:	643b      	str	r3, [r7, #64]	; 0x40
 8007342:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007344:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007346:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e6      	bne.n	8007322 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3308      	adds	r3, #8
 800735a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	61fb      	str	r3, [r7, #28]
   return(result);
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800736a:	f023 0301 	bic.w	r3, r3, #1
 800736e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3308      	adds	r3, #8
 8007376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007378:	62fa      	str	r2, [r7, #44]	; 0x2c
 800737a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800737e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007380:	e841 2300 	strex	r3, r2, [r1]
 8007384:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1e3      	bne.n	8007354 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007390:	2b01      	cmp	r3, #1
 8007392:	d118      	bne.n	80073c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f023 0310 	bic.w	r3, r3, #16
 80073a8:	647b      	str	r3, [r7, #68]	; 0x44
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073b2:	61bb      	str	r3, [r7, #24]
 80073b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6979      	ldr	r1, [r7, #20]
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	613b      	str	r3, [r7, #16]
   return(result);
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e6      	bne.n	8007394 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80073da:	bf00      	nop
 80073dc:	3754      	adds	r7, #84	; 0x54
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f7ff fab9 	bl	800697c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800740a:	bf00      	nop
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b088      	sub	sp, #32
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	60bb      	str	r3, [r7, #8]
   return(result);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800742e:	61fb      	str	r3, [r7, #28]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	461a      	mov	r2, r3
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6979      	ldr	r1, [r7, #20]
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	613b      	str	r3, [r7, #16]
   return(result);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e6      	bne.n	800741a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff fa84 	bl	8006968 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007460:	bf00      	nop
 8007462:	3720      	adds	r7, #32
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d101      	bne.n	80074ba <HAL_UARTEx_DisableFifoMode+0x16>
 80074b6:	2302      	movs	r3, #2
 80074b8:	e027      	b.n	800750a <HAL_UARTEx_DisableFifoMode+0x66>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2224      	movs	r2, #36	; 0x24
 80074c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 0201 	bic.w	r2, r2, #1
 80074e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80074e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2220      	movs	r2, #32
 80074fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007526:	2b01      	cmp	r3, #1
 8007528:	d101      	bne.n	800752e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800752a:	2302      	movs	r3, #2
 800752c:	e02d      	b.n	800758a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2224      	movs	r2, #36	; 0x24
 800753a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0201 	bic.w	r2, r2, #1
 8007554:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f850 	bl	8007610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2220      	movs	r2, #32
 800757c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d101      	bne.n	80075aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075a6:	2302      	movs	r3, #2
 80075a8:	e02d      	b.n	8007606 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2224      	movs	r2, #36	; 0x24
 80075b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0201 	bic.w	r2, r2, #1
 80075d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f812 	bl	8007610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2220      	movs	r2, #32
 80075f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800761c:	2b00      	cmp	r3, #0
 800761e:	d108      	bne.n	8007632 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007630:	e031      	b.n	8007696 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007632:	2308      	movs	r3, #8
 8007634:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007636:	2308      	movs	r3, #8
 8007638:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	0e5b      	lsrs	r3, r3, #25
 8007642:	b2db      	uxtb	r3, r3
 8007644:	f003 0307 	and.w	r3, r3, #7
 8007648:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	0f5b      	lsrs	r3, r3, #29
 8007652:	b2db      	uxtb	r3, r3
 8007654:	f003 0307 	and.w	r3, r3, #7
 8007658:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800765a:	7bbb      	ldrb	r3, [r7, #14]
 800765c:	7b3a      	ldrb	r2, [r7, #12]
 800765e:	4911      	ldr	r1, [pc, #68]	; (80076a4 <UARTEx_SetNbDataToProcess+0x94>)
 8007660:	5c8a      	ldrb	r2, [r1, r2]
 8007662:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007666:	7b3a      	ldrb	r2, [r7, #12]
 8007668:	490f      	ldr	r1, [pc, #60]	; (80076a8 <UARTEx_SetNbDataToProcess+0x98>)
 800766a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800766c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007670:	b29a      	uxth	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	7b7a      	ldrb	r2, [r7, #13]
 800767c:	4909      	ldr	r1, [pc, #36]	; (80076a4 <UARTEx_SetNbDataToProcess+0x94>)
 800767e:	5c8a      	ldrb	r2, [r1, r2]
 8007680:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007684:	7b7a      	ldrb	r2, [r7, #13]
 8007686:	4908      	ldr	r1, [pc, #32]	; (80076a8 <UARTEx_SetNbDataToProcess+0x98>)
 8007688:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800768a:	fb93 f3f2 	sdiv	r3, r3, r2
 800768e:	b29a      	uxth	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007696:	bf00      	nop
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	08007b70 	.word	0x08007b70
 80076a8:	08007b78 	.word	0x08007b78

080076ac <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b08b      	sub	sp, #44	; 0x2c
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	fa93 f3a3 	rbit	r3, r3
 80076c6:	613b      	str	r3, [r7, #16]
  return result;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80076d2:	2320      	movs	r3, #32
 80076d4:	e003      	b.n	80076de <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	fab3 f383 	clz	r3, r3
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	2103      	movs	r1, #3
 80076e2:	fa01 f303 	lsl.w	r3, r1, r3
 80076e6:	43db      	mvns	r3, r3
 80076e8:	401a      	ands	r2, r3
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ee:	6a3b      	ldr	r3, [r7, #32]
 80076f0:	fa93 f3a3 	rbit	r3, r3
 80076f4:	61fb      	str	r3, [r7, #28]
  return result;
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007700:	2320      	movs	r3, #32
 8007702:	e003      	b.n	800770c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	fab3 f383 	clz	r3, r3
 800770a:	b2db      	uxtb	r3, r3
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	6879      	ldr	r1, [r7, #4]
 8007710:	fa01 f303 	lsl.w	r3, r1, r3
 8007714:	431a      	orrs	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	601a      	str	r2, [r3, #0]
}
 800771a:	bf00      	nop
 800771c:	372c      	adds	r7, #44	; 0x2c
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8007726:	b480      	push	{r7}
 8007728:	b085      	sub	sp, #20
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	43db      	mvns	r3, r3
 800773a:	401a      	ands	r2, r3
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	6879      	ldr	r1, [r7, #4]
 8007740:	fb01 f303 	mul.w	r3, r1, r3
 8007744:	431a      	orrs	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	605a      	str	r2, [r3, #4]
}
 800774a:	bf00      	nop
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8007756:	b480      	push	{r7}
 8007758:	b08b      	sub	sp, #44	; 0x2c
 800775a:	af00      	add	r7, sp, #0
 800775c:	60f8      	str	r0, [r7, #12]
 800775e:	60b9      	str	r1, [r7, #8]
 8007760:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	689a      	ldr	r2, [r3, #8]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	fa93 f3a3 	rbit	r3, r3
 8007770:	613b      	str	r3, [r7, #16]
  return result;
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800777c:	2320      	movs	r3, #32
 800777e:	e003      	b.n	8007788 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	fab3 f383 	clz	r3, r3
 8007786:	b2db      	uxtb	r3, r3
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	2103      	movs	r1, #3
 800778c:	fa01 f303 	lsl.w	r3, r1, r3
 8007790:	43db      	mvns	r3, r3
 8007792:	401a      	ands	r2, r3
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	fa93 f3a3 	rbit	r3, r3
 800779e:	61fb      	str	r3, [r7, #28]
  return result;
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80077aa:	2320      	movs	r3, #32
 80077ac:	e003      	b.n	80077b6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	fab3 f383 	clz	r3, r3
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	6879      	ldr	r1, [r7, #4]
 80077ba:	fa01 f303 	lsl.w	r3, r1, r3
 80077be:	431a      	orrs	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80077c4:	bf00      	nop
 80077c6:	372c      	adds	r7, #44	; 0x2c
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b08b      	sub	sp, #44	; 0x2c
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	68da      	ldr	r2, [r3, #12]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	fa93 f3a3 	rbit	r3, r3
 80077ea:	613b      	str	r3, [r7, #16]
  return result;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80077f6:	2320      	movs	r3, #32
 80077f8:	e003      	b.n	8007802 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	fab3 f383 	clz	r3, r3
 8007800:	b2db      	uxtb	r3, r3
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	2103      	movs	r1, #3
 8007806:	fa01 f303 	lsl.w	r3, r1, r3
 800780a:	43db      	mvns	r3, r3
 800780c:	401a      	ands	r2, r3
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	fa93 f3a3 	rbit	r3, r3
 8007818:	61fb      	str	r3, [r7, #28]
  return result;
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007824:	2320      	movs	r3, #32
 8007826:	e003      	b.n	8007830 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	fab3 f383 	clz	r3, r3
 800782e:	b2db      	uxtb	r3, r3
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	fa01 f303 	lsl.w	r3, r1, r3
 8007838:	431a      	orrs	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	60da      	str	r2, [r3, #12]
}
 800783e:	bf00      	nop
 8007840:	372c      	adds	r7, #44	; 0x2c
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800784a:	b480      	push	{r7}
 800784c:	b08b      	sub	sp, #44	; 0x2c
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	60b9      	str	r1, [r7, #8]
 8007854:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6a1a      	ldr	r2, [r3, #32]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	fa93 f3a3 	rbit	r3, r3
 8007864:	613b      	str	r3, [r7, #16]
  return result;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007870:	2320      	movs	r3, #32
 8007872:	e003      	b.n	800787c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	fab3 f383 	clz	r3, r3
 800787a:	b2db      	uxtb	r3, r3
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	210f      	movs	r1, #15
 8007880:	fa01 f303 	lsl.w	r3, r1, r3
 8007884:	43db      	mvns	r3, r3
 8007886:	401a      	ands	r2, r3
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	fa93 f3a3 	rbit	r3, r3
 8007892:	61fb      	str	r3, [r7, #28]
  return result;
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800789e:	2320      	movs	r3, #32
 80078a0:	e003      	b.n	80078aa <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	fab3 f383 	clz	r3, r3
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	6879      	ldr	r1, [r7, #4]
 80078ae:	fa01 f303 	lsl.w	r3, r1, r3
 80078b2:	431a      	orrs	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80078b8:	bf00      	nop
 80078ba:	372c      	adds	r7, #44	; 0x2c
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b08b      	sub	sp, #44	; 0x2c
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	0a1b      	lsrs	r3, r3, #8
 80078d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	fa93 f3a3 	rbit	r3, r3
 80078e0:	613b      	str	r3, [r7, #16]
  return result;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d101      	bne.n	80078f0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80078ec:	2320      	movs	r3, #32
 80078ee:	e003      	b.n	80078f8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	fab3 f383 	clz	r3, r3
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	210f      	movs	r1, #15
 80078fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007900:	43db      	mvns	r3, r3
 8007902:	401a      	ands	r2, r3
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	0a1b      	lsrs	r3, r3, #8
 8007908:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	fa93 f3a3 	rbit	r3, r3
 8007910:	61fb      	str	r3, [r7, #28]
  return result;
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800791c:	2320      	movs	r3, #32
 800791e:	e003      	b.n	8007928 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	fab3 f383 	clz	r3, r3
 8007926:	b2db      	uxtb	r3, r3
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	6879      	ldr	r1, [r7, #4]
 800792c:	fa01 f303 	lsl.w	r3, r1, r3
 8007930:	431a      	orrs	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8007936:	bf00      	nop
 8007938:	372c      	adds	r7, #44	; 0x2c
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b088      	sub	sp, #32
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	fa93 f3a3 	rbit	r3, r3
 8007958:	60fb      	str	r3, [r7, #12]
  return result;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <LL_GPIO_Init+0x26>
    return 32U;
 8007964:	2320      	movs	r3, #32
 8007966:	e003      	b.n	8007970 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	fab3 f383 	clz	r3, r3
 800796e:	b2db      	uxtb	r3, r3
 8007970:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007972:	e047      	b.n	8007a04 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	2101      	movs	r1, #1
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	fa01 f303 	lsl.w	r3, r1, r3
 8007980:	4013      	ands	r3, r2
 8007982:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d039      	beq.n	80079fe <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d003      	beq.n	800799a <LL_GPIO_Init+0x58>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	2b02      	cmp	r3, #2
 8007998:	d10d      	bne.n	80079b6 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	461a      	mov	r2, r3
 80079a0:	69b9      	ldr	r1, [r7, #24]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7ff fed7 	bl	8007756 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	461a      	mov	r2, r3
 80079ae:	69b9      	ldr	r1, [r7, #24]
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7ff feb8 	bl	8007726 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	461a      	mov	r2, r3
 80079bc:	69b9      	ldr	r1, [r7, #24]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7ff ff06 	bl	80077d0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d111      	bne.n	80079f0 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	2bff      	cmp	r3, #255	; 0xff
 80079d0:	d807      	bhi.n	80079e2 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	461a      	mov	r2, r3
 80079d8:	69b9      	ldr	r1, [r7, #24]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7ff ff35 	bl	800784a <LL_GPIO_SetAFPin_0_7>
 80079e0:	e006      	b.n	80079f0 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	461a      	mov	r2, r3
 80079e8:	69b9      	ldr	r1, [r7, #24]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7ff ff6a 	bl	80078c4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	461a      	mov	r2, r3
 80079f6:	69b9      	ldr	r1, [r7, #24]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff fe57 	bl	80076ac <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	3301      	adds	r3, #1
 8007a02:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1b0      	bne.n	8007974 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3720      	adds	r7, #32
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a24:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007a28:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	43db      	mvns	r3, r3
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b085      	sub	sp, #20
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	1d3b      	adds	r3, r7, #4
 8007a5c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <memset>:
 8007a8e:	4402      	add	r2, r0
 8007a90:	4603      	mov	r3, r0
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d100      	bne.n	8007a98 <memset+0xa>
 8007a96:	4770      	bx	lr
 8007a98:	f803 1b01 	strb.w	r1, [r3], #1
 8007a9c:	e7f9      	b.n	8007a92 <memset+0x4>
	...

08007aa0 <__libc_init_array>:
 8007aa0:	b570      	push	{r4, r5, r6, lr}
 8007aa2:	4d0d      	ldr	r5, [pc, #52]	; (8007ad8 <__libc_init_array+0x38>)
 8007aa4:	2600      	movs	r6, #0
 8007aa6:	4c0d      	ldr	r4, [pc, #52]	; (8007adc <__libc_init_array+0x3c>)
 8007aa8:	1b64      	subs	r4, r4, r5
 8007aaa:	10a4      	asrs	r4, r4, #2
 8007aac:	42a6      	cmp	r6, r4
 8007aae:	d109      	bne.n	8007ac4 <__libc_init_array+0x24>
 8007ab0:	4d0b      	ldr	r5, [pc, #44]	; (8007ae0 <__libc_init_array+0x40>)
 8007ab2:	2600      	movs	r6, #0
 8007ab4:	4c0b      	ldr	r4, [pc, #44]	; (8007ae4 <__libc_init_array+0x44>)
 8007ab6:	f000 f817 	bl	8007ae8 <_init>
 8007aba:	1b64      	subs	r4, r4, r5
 8007abc:	10a4      	asrs	r4, r4, #2
 8007abe:	42a6      	cmp	r6, r4
 8007ac0:	d105      	bne.n	8007ace <__libc_init_array+0x2e>
 8007ac2:	bd70      	pop	{r4, r5, r6, pc}
 8007ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac8:	3601      	adds	r6, #1
 8007aca:	4798      	blx	r3
 8007acc:	e7ee      	b.n	8007aac <__libc_init_array+0xc>
 8007ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad2:	3601      	adds	r6, #1
 8007ad4:	4798      	blx	r3
 8007ad6:	e7f2      	b.n	8007abe <__libc_init_array+0x1e>
 8007ad8:	08007b88 	.word	0x08007b88
 8007adc:	08007b88 	.word	0x08007b88
 8007ae0:	08007b88 	.word	0x08007b88
 8007ae4:	08007b8c 	.word	0x08007b8c

08007ae8 <_init>:
 8007ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aea:	bf00      	nop
 8007aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aee:	bc08      	pop	{r3}
 8007af0:	469e      	mov	lr, r3
 8007af2:	4770      	bx	lr

08007af4 <_fini>:
 8007af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af6:	bf00      	nop
 8007af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007afa:	bc08      	pop	{r3}
 8007afc:	469e      	mov	lr, r3
 8007afe:	4770      	bx	lr
